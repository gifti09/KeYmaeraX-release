Functions.
  R ep.   /* time limit for control decisions */
  R B.    /* minimum braking capability of the robot */
  R A.    /* maximum acceleration -B <= a <= A */
  R abs(R).  /* predefined function of absolute value */
End.

ProgramVariables.
  R x.    /* robot position: x */
  R y.    /* robot position: y */
  R v.    /* robot translational velocity */
  R a.    /* robot translational acceleration */
  R dx.   /* robot orientation: x */
  R dy.   /* robot orientation: y */
  R w.    /* robot rotational velocity */
  R r.    /* radius of curve (i)straight: k=infty; (ii)curve: k!=infty */
  R xo.   /* position summary of obstacles */
  R yo.
  R t.    /* time */
End.

Problem.
    v >= 0
  & ( abs(x-xo) > v^2 / (2*B)
    | abs(y-yo) > v^2 / (2*B))
  & dx^2 + dy^2 = 1
  & A >= 0
  & B > 0
  & ep > 0
  & r != 0
  ->
  [
    {
      {
        {
          /* brake on current curve or remain stopped */
          { a := -B; }
          ++
          { ?v = 0; a := 0; w := 0; }
      	  ++
          /* or choose a new safe curve */
          { a :=*; ?-B <= a & a <= A;
            r :=*; ?r != 0;
            w :=*; ?v = w/r;

            /* for the chosen a, w, cx, cy: worst case position of obstacles wrt. curve */
            xo :=*;
            yo :=*;

            /* use that curve, if it is a safe one (admissible velocities) */
            ? abs(x-xo) > v^2/(2*B) + (A/B + 1) * (A/2 * ep^2 + ep*v)
            | abs(y-yo) > v^2/(2*B) + (A/B + 1) * (A/2 * ep^2 + ep*v);
    	  }
    	};
    	t := 0;
      }

      /* dynamics */
      { x' = v * dx,
        y' = v * dy,
        dx' = -w * dy,
        dy' = w * dx,
        v' = a,
        w' = a/r,
        t' = 1 & t <= ep & v >= 0
      }
    }*@invariant(v >= 0
                  & dx^2+dy^2 = 1
                  & r != 0
                  & (abs(x-xo) > v^2 / (2*B)
                   | abs(y-yo) > v^2 / (2*B)))
  ] (x - xo)^2 + (y - yo)^2 > 0
End.