Functions.
  R abs(R).
  R min(R, R).
  R max(R, R).
End.

ProgramVariables.
  /** Variables **/
   /* horizontal */
  R r.    /* relative distance in ft; xi - xo */
          /* x = r */
  R rv.   /* relative speed -(vi - vo) */
   /* vertical */
  R h.    /* relative altitude in ft */
          /* if negative: the intruder is lower than the ownship */
          /* h := hi - ho */
          /* z = h */
  R dhd.  /* vertical velocity of ownship */
  R dhf.  /* target minimum velocity */
  R w.    /* velocity bound 1 = lower, -1 = upper */
  R ao.   /* vertical acceleration of ownship */
  /** Constants **/
  R hp.   /* puck height */
  R rp.   /* puck radius */
  R a.    /* minimal vertical acceleration. Typically g/4 */

  R t.
  R ro.
  R ho.
End.

Problem.
  (hp > 0 & rp >= 0 & rv >= 0 & a > 0) &
  ( (w=-1 | w=1) & 
      (
        (
          ((w * dhf >= 0) ->
            ((-rp <= r) & (r  <  -rp - rv * min(0, w * dhd) / a) ->
                (w * rv^2 * (h) < a / 2 * (r + rp)^2 +
                                   w * rv * dhd * (r + rp) - rv^2 * hp))
            &
            ((-rp - rv * min(0, w * dhd) / a <= r) &
             (r <= rp - rv * min(0, w * dhd) / a) ->
                (w * (h)  <  (- min(0, w * dhd)^2) / (2 * a) - hp))
            &
            ((rp - rv * min(0, w * dhd) / a  <  r) &
             (r <= rp + rv * max(0, w * (dhf - dhd)) / a) ->
                (w * rv^2 * (h)  <  a / 2 * (r - rp)^2 +
                                   w * rv * dhd * (r - rp) - rv^2 * hp))
            &
            ((rp + rv * max(0, w * (dhf - dhd)) / a  <  r) ->
                (rv = 0) |
                (w * rv * (h)  <  w * dhf * (r - rp)
                       - rv * max(0, w * (dhf - dhd))^2 / (2 * a) - rv * hp))
          )
          &
          ((w * dhf < 0) ->
            ((-rp <= r) &
             (r < -rp + rv * max(0, w * (dhf - dhd)) / a) ->
                (w * rv^2 * (h)  <  a / 2 * (r + rp)^2
                                 + w * rv * dhd * (r + rp) - rv^2 * hp))
            &
            ((-rp + rv * max(0, w * (dhf - dhd)) / a  <=  r) ->
                (rv = 0 & r > rp) |
                (w * rv * (h)  <  w * dhf * (r + rp)
                       - rv * max(0, w * (dhf - dhd))^2 / (2 * a) - rv * hp))
          )
        )
      ) /* C(w,dhf) */
  )
  -> [
  {   {
      { ?true; ++
        {dhf :=*; {w:=-1; ++ w:=1;}
         ?(
            (
              ((w * dhf >= 0) ->
                ((-rp <= r) & (r  <  -rp - rv * min(0, w * dhd) / a) ->
                    (w * rv^2 * (h) < a / 2 * (r + rp)^2 +
                                       w * rv * dhd * (r + rp) - rv^2 * hp))
                &
                ((-rp - rv * min(0, w * dhd) / a <= r) &
                 (r <= rp - rv * min(0, w * dhd) / a) ->
                    (w * (h)  <  (- min(0, w * dhd)^2) / (2 * a) - hp))
                &
                ((rp - rv * min(0, w * dhd) / a  <  r) &
                 (r <= rp + rv * max(0, w * (dhf - dhd)) / a) ->
                    (w * rv^2 * (h)  <  a / 2 * (r - rp)^2 +
                                       w * rv * dhd * (r - rp) - rv^2 * hp))
                &
                ((rp + rv * max(0, w * (dhf - dhd)) / a  <  r) ->
                    (rv = 0) |
                    (w * rv * (h)  <  w * dhf * (r - rp)
                           - rv * max(0, w * (dhf - dhd))^2 / (2 * a) - rv * hp))
              )
              &
              ((w * dhf < 0) ->
                ((-rp <= r) &
                 (r < -rp + rv * max(0, w * (dhf - dhd)) / a) ->
                    (w * rv^2 * (h)  <  a / 2 * (r + rp)^2
                                     + w * rv * dhd * (r + rp) - rv^2 * hp))
                &
                ((-rp + rv * max(0, w * (dhf - dhd)) / a  <=  r) ->
                    (rv = 0 & r > rp) |
                    (w * rv * (h)  <  w * dhf * (r + rp)
                           - rv * max(0, w * (dhf - dhd))^2 / (2 * a) - rv * hp))
              )
            )
          ); /* C(w,dhf) */
        }}
        ao :=*;
      }
      {r' = -rv, h' = -dhd, dhd' = ao & (w * dhd >= w * dhf | w * ao >= a)}
   }*
  ] ((abs(r) > rp | abs(h) > hp) &
      (
        (
          ((w * dhf >= 0) ->
            ((-rp <= r) & (r  <  -rp - rv * min(0, w * dhd) / a) ->
                (w * rv^2 * (h) < a / 2 * (r + rp)^2 +
                                   w * rv * dhd * (r + rp) - rv^2 * hp))
            &
            ((-rp - rv * min(0, w * dhd) / a <= r) &
             (r <= rp - rv * min(0, w * dhd) / a) ->
                (w * (h)  <  (- min(0, w * dhd)^2) / (2 * a) - hp))
            &
            ((rp - rv * min(0, w * dhd) / a  <  r) &
             (r <= rp + rv * max(0, w * (dhf - dhd)) / a) ->
                (w * rv^2 * (h)  <  a / 2 * (r - rp)^2 +
                                   w * rv * dhd * (r - rp) - rv^2 * hp))
            &
            ((rp + rv * max(0, w * (dhf - dhd)) / a  <  r) ->
                (rv = 0) |
                (w * rv * (h)  <  w * dhf * (r - rp)
                       - rv * max(0, w * (dhf - dhd))^2 / (2 * a) - rv * hp))
          )
          &
          ((w * dhf < 0) ->
            ((-rp <= r) &
             (r < -rp + rv * max(0, w * (dhf - dhd)) / a) ->
                (w * rv^2 * (h)  <  a / 2 * (r + rp)^2
                                 + w * rv * dhd * (r + rp) - rv^2 * hp))
            &
            ((-rp + rv * max(0, w * (dhf - dhd)) / a  <=  r) ->
                (rv = 0 & r > rp) |
                (w * rv * (h)  <  w * dhf * (r + rp)
                       - rv * max(0, w * (dhf - dhd))^2 / (2 * a) - rv * hp))
          )
        )
      ) /* C(w,dhf) */
      )
End.

/* Main changes compared to the acas-skeleton:
   - suppression of the Freeaction case
   - no mention of d, dp, dl or t to reduce the number of variables,
     since they are not necessary anymore
   - similarly, no mention of amin, amax and g
   - change of ?(w^2=1) to the more intuitive (w:=1 ++ w:=-1),
     with a generalization to (w^2=1)
   - added loop invariant and generalization
   - added conditions explictly
   - changed dho (initial ownship) to dhd (dh at delay d), that's how it
     is in the conditions
   - also suppression of dho and dhi that don't appear anywhere
   - added w in the condition of the ODE
   - suppressed the condition that r >= -rp
   - suppressed precondition (Abs(h) > hp | Abs(r) > rp)
     because it's implied by C(w,dhf)
   - renamed a as aown and g/4 as a
   - added precondition a > 0
*/