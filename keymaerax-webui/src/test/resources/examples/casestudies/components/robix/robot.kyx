Functions.
  R ep.   /* time limit for control decisions */
  R B.    /* minimum braking capability of the robot */
  R A.    /* maximum acceleration -B <= a <= A */
  R V.    /* maximum velocity of obstacles */
  R abs(R).  /* predefined function of absolute value */
End.

ProgramVariables.
  R x.    /* robot position: x */
  R y.    /* robot position: y */
  R v.    /* robot translational velocity */
  R a.    /* robot translational acceleration */
  R dx.   /* robot orientation: x */
  R dy.   /* robot orientation: y */
  R w.    /* robot rotational velocity */
  R k.    /* curvature of curve (i)straight: k=0; (ii)curve: k!=0 */
  R xo.   /* position summary of obstacles */
  R yo.
  R t.    /* time */
  R xo0.
  R yo0.
End.

Problem.
    v >= 0
  & ( abs(x-xo) > v^2 / (2*B) + V*(v/B)
    | abs(y-yo) > v^2 / (2*B) + V*(v/B))
  & dx^2 + dy^2 = 1
  & A >= 0
  & B > 0
  & V >= 0
  & ep > 0
  & xo0 = xo
  & yo0 = yo
  & t = 0
  ->
  [
    {

      /* ctrl */
      {
        /* brake on current curve or remain stopped */
        { a := -B; }
        ++
        { ?v = 0; a := 0; w := 0; }
        ++
        /* or choose a new safe curve */
        { a :=*; ?-B <= a & a <= A;
          k :=*;
          w :=*; ?v * k = w;

          /* use that curve, if it is a safe one (admissible velocities) */
          ? abs(x-xo) > v^2/(2*B) + V*v/B + (A/B + 1) * (A/2 * ep^2 + ep*(v+V))
          | abs(y-yo) > v^2/(2*B) + V*v/B + (A/B + 1) * (A/2 * ep^2 + ep*(v+V));
        }
      };

      xo0 := xo;
      yo0 := yo;

    	t := 0;

      /* dynamics */
      { x' = v * dx,
        y' = v * dy,
        dx' = -w * dy,
        dy' = w * dx,
        v' = a,
        w' = a*k,
        t' = 1 & t <= ep & v >= 0
      }

      /* ports */
      xo :=*; ?-V*t <= xo-xo0 & xo-xo0 <= V*t;
      yo :=*; ?-V*t <= yo-yo0 & yo-yo0 <= V*t;
    }*
  ] (v > 0 -> (x - xo)^2 + (y - yo)^2 > 0)
End.