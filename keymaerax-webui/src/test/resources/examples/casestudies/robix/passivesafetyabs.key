Functions.
  R ep.   /* time limit for control decisions */
  R B.    /* minimum braking capability of the robot */
  R A.    /* maximum acceleration -B <= a <= A */
  R V.  /* maximum velocity of obstacles */
  R abs(R).  /* predefined function of absolute value */
End.

ProgramVariables.
  R x.    /* robot position: x */
  R y.    /* robot position: y */
  R v.    /* robot translational velocity */
  R a.    /* robot translational acceleration */
  R dx.   /* robot orientation: x */
  R dy.   /* robot orientation: y */
  R w.    /* robot rotational velocity */
  R r.    /* radius of curve */
  R xo.   /* position summary of obstacles */
  R yo.
  R dxo.  /* direction and linear velocity of obstacles */
  R dyo.
  R t.    /* time */
End.

Problem.
    v >= 0
  & ( abs(x-xo) > v^2 / (2*B) + V*(v/B)
    | abs(y-yo) > v^2 / (2*B) + V*(v/B))
  & r != 0
  & dx^2 + dy^2 = 1
  & A >= 0
  & B > 0
  & V >= 0
  & ep > 0
  ->
  [
    {
      {
        /* control obstacle */
        dxo :=*;
        dyo :=*;
        ?dxo^2 + dyo^2 <= V^2;
        {
          /* brake on current curve or remain stopped */
          { a := -B; }
          ++
          { ?v = 0; a := 0; w := 0; }
    	  ++
    	  /* or choose a new safe curve */
    	  { a :=*; ?-B <= a & a <= A;

    		r :=*; ?r != 0; /* do not spin */
    		w :=*; ?w * r = v;

            /* for the chosen a, w, cx, cy: worst case position of obstacles wrt. curve */
            xo :=*;
            yo :=*;

    		/* use that curve, if it is a safe one (admissible velocities) */
    		? abs(x-xo) > v^2/(2*B) + V*v/B + (A/B + 1) * (A/2 * ep^2 + ep*(v+V))
    		  | abs(y-yo) > v^2/(2*B) + V*v/B + (A/B + 1) * (A/2 * ep^2 + ep*(v+V));
    	  }
    	};

    	t := 0;
      }

      /* dynamics */
      { x' = v * dx,
        y' = v * dy,
        dx' = -w * dy,
        dy' = w * dx,
        v' = a,
        w' = a/r,
    	xo' = dxo,
    	yo' = dyo,
    	t' = 1 & t <= ep & v >= 0
      } /*@invariant(
          t >= 0,
          dx^2 + dy^2 = 1
          v = old(v) + a*t,
          -t * (v - a/2*t) <= x - old(x) & x - old(x) <= t * (v - a/2*t),
          -t * (v - a/2*t) <= y - old(y) & y - old(y) <= t * (v - a/2*t),
          -t * V <= xo - old(xo) & xo - old(xo) <= t * V,
          -t * V <= yo - old(yo) & yo - old(yo) <= t * V
        )*/
    }* /*@invariant(
         v >= 0
         & dx^2+dy^2 = 1
         & r != 0
         & (v = 0 | abs(x-xo) > v^2 / (2*B) + V*(v/B) | abs(y-yo) > v^2 / (2*B) + V*(v/B))
       )*/
  ] (v > 0 -> (x - xo)^2 + (y - yo)^2 > 0)
End.