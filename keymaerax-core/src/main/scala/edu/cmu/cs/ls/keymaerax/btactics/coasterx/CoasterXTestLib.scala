package edu.cmu.cs.ls.keymaerax.btactics.coasterx

import edu.cmu.cs.ls.keymaerax.bellerophon.BelleExpr
import edu.cmu.cs.ls.keymaerax.parser.KeYmaeraXPrettyPrinter
import edu.cmu.cs.ls.keymaerax.pt.ProvableSig
import edu.cmu.cs.ls.keymaerax.btactics.Augmentors._
import edu.cmu.cs.ls.keymaerax.btactics.{DebuggingTactics, TactixLibrary}
import edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary._
import edu.cmu.cs.ls.keymaerax.btactics.coasterx.CoasterXParser.File
import edu.cmu.cs.ls.keymaerax.btactics.coasterx.CoasterXSpec.TPoint
import edu.cmu.cs.ls.keymaerax.core.{Formula, Number, Sequent, StaticSemantics, Term}
import edu.cmu.cs.ls.keymaerax.parser.StringConverter._

object CoasterXTestLib {
  val exampleFile1:String = "([(40, 100), \n  (800, 100), \n  (1003, 292), \n  (1014.0703641303933, 490.6092116668379), \n  (1037.047741675357, 512.3415096403996),\n  (1060, 491), \n  (1074.5057163758297, 291.8183498791612), \n  (1198, 111)], \n [('straight', (None,), None), \n  ('straight', ((40, 500, 800, 500),), 0.0),\n  ('arc', ((596.6848958333333, 93.36979166666652, 1003.3151041666667, 500.0), -90.0, 86.80966720837762), 17.940621403912424), \n  ('straight', ((1003, 308, 1014.0703641303933, 109.3907883331621),), 17.940621403912424), \n  ('arc', ((1014.0346977885041, 87.6584903596004, 1060.0607855622097, 133.68457813330605), 176.80966720837756, -86.80966720837756), 0), \n  ('arc', ((1014.0346977885041, 87.6584903596004, 1060.0607855622097, 133.68457813330605), 90, -85.8346983689234), -13.7312522153492), \n  ('straight', ((1060, 109, 1074.5057163758297, 308.1816501208388),), -13.7312522153492), \n  ('arc', ((1073.9302486950965, 74.48837803692527, 1509.6673714837575, 510.2255008255863), -175.83469836892337, 60.33353966713379), -0.4770003569825235)], \n29.0, \n(1143.3888820234438, 306.5466392767369, 1335.184957771975, 498.342715025268))"
  val exampleFile1Shrunk:String = "([(40,100),(800,100),(1003,292),(1014.0703641303933,490.6092116668379),(1037.047741675357,512.3415096403996),(1074.5057163758297,291.8183498791612),(1198,111)]," +
    "[('straight',(None,),None)," +
    "('straight',((40, 500, 800, 500),), 0.0)," +
    "('arc', ((596.6848958333333, 93.36979166666652, 1003.3151041666667, 500.0), -90.0, 86.80966720837762), 17.940621403912424)," +
    "('straight', ((1003, 308, 1014.0703641303933,109.3907883331621),), 17.940621403912424)," +
    "('arc', ((1014.0346977885041, 87.6584903596004,1060.0607855622097, 133.68457813330605), 176.80966720837756, -172.644366), 0)," +
    "('straight', ((1060, 109, 1074.5057163758297, 308.1816501208388),), -13.7312522153492)," +
    "('arc', ((1073.9302486950965, 74.48837803692527, 1509.6673714837575, 510.2255008255863), -175.83469836892337, 60.33353966713379), -0.4770003569825235)]" +
    ", \n165, \n(1143.3888820234438, 306.5466392767369, 1335.184957771975, 498.342715025268))"

  val joints:String = "(40,100),(800,100),(1003,292),(1014.0703641303933,490.6092116668379),(1037.047741675357,512.3415096403996),(1060,491),(1074.5057163758297,291.8183498791612),(1198,111)"
  val segments:String = "('straight',(None,),None),('straight',((40,500,800,500),),0.0),('arc',((596.6848958333333,93.36979166666652,1003.3151041666667,500.0),-90.0,86.80966720837762),17.940621403912424),('straight',((1003,308,1014.0703641303933,109.3907883331621),),17.940621403912424),('arc',((1014.0346977885041,87.6584903596004,1060.0607855622097,133.68457813330605),176.80966720837756,-86.80966720837756),0),('arc',((1014.0346977885041,87.6584903596004,1060.0607855622097,133.68457813330605),90,-85.8346983689234),-13.7312522153492),('straight',((1060,109,1074.5057163758297,308.1816501208388),),-13.7312522153492),('arc',((1073.9302486950965,74.48837803692527,1509.6673714837575,510.2255008255863),-175.83469836892337,60.33353966713379),-0.4770003569825235)"
  val full:String = "([" + joints + "], [" + segments + "], 165, \n(1143.3888820234438, 306.5466392767369, 1335.184957771975, 498.342715025268))"
  val seg1:String = "('straight',(None,),None)"
  val seg2:String = "('straight',((40,500,800,500),),0.0)"
  val seg3:String = "('arc',((596.6848958333333,93.36979166666652,1003.3151041666667,500.0),-90.0,86.80966720837762),17.940621403912424)"
  val seg4:String = "('straight',((1003,308,1014.0703641303933,109.3907883331621),),17.940621403912424)"
  val seg5:String = "('arc',((1014.0346977885041,87.6584903596004,1060.0607855622097,133.68457813330605),176.80966720837756,-86.80966720837756),0)"
  val seg6:String = "('arc',((1014.0346977885041,87.6584903596004,1060.0607855622097,133.68457813330605),90,-85.8346983689234),-13.7312522153492)"
  val seg7:String = "('straight',((1060,109,1074.5057163758297,308.1816501208388),),-13.7312522153492)"
  val seg8:String = "('arc',((1073.9302486950965,74.48837803692527,1509.6673714837575,510.2255008255863),-175.83469836892337,60.33353966713379),-0.4770003569825235)"

  // More example files
  val straightLine = "([(0, 100), (1000, 100)], [('straight', (None,), None), ('straight', ((0, 500, 1000, 500),), 0.0)], 1.0, (0, 0, 0, 0))"
  val quarterArc = "([(100, 100), (171, 129)], [('straight', (None,), None),   ('arc', ((0, 300, 200, 500), -90, 45.0), 1.0)], 500.0, (171, 129, 171, 129))"
  val halfArc = "([(0, 200), (100, 300)], [('straight', (None,), None),   ('arc', ((0, 300, 200, 500), -180, -90.0), 0.0)], 500.0, (100, 300, 100, 300))"
  val secondHalfArc = "([(100, 300), (200, 200)], [('straight', (None,), None),  ('arc', ((0, 300.0, 200, 500), 90.0, -90), -48.494845360825195)], 500.0, (100, 300, 100, 300))"
  val fullArc = "([(0, 200), (100, 300), (200, 200)],  [('straight', (None,), None), ('arc', ((0, 300, 200, 500), -180, -90.0), 0.0),   ('arc', ((0, 300.0, 200, 500), 90.0, -90), -48.494845360825195)], 500.0, (-800, -94.31605562579006, 198.106405394016, 906.9587020648964))"
  val simpleHill = "([(0, 100),  (100, 200),  (342, 300),   (579, 202),  (683, 102)]," +
    "[('straight', (None,), None), " +
    "('straight', ((0, 500, 100, 400),), 1.0), " +
    "('arc', ((0, 300, 683, 983), 135.0, -45.0), 0), " +
    "('arc', ((0, 300, 683, 983), 90, -45.0), -1), ('straight', ((579, 398, 683, 497),), -1)]," +
    " 500.0," +
    " (-2406.346757107975, -29.408888352737677, 1211.9531693319414, 3588.8910380871785))"
  val simpleValley = "([(0, 500),  (100, 400),   (199, 359),   (299, 398),   (415, 505)], [('straight', (None,), None),  ('straight', ((0, 100, 100, 200),), -1.0),  ('arc', ((59, -39, 339, 241), -135, 45), 0),  ('arc', ((51, -55, 347, 241), -90,  43), 0.92), ('straight', ((299, 202, 415, 95),), 0.92)], 500.0, (415.37482499434077, 94.97095456951104, 253.3717788455165, 243.96392952765427))"
  val simpleInversion:String =
      "([" +
        "(100,0)," +
        "(200,100)," +
        "(229,171)," +
        "(129,271)," +
        "(29,171)," +
        "(58,100)," +
        "(158,0)" +
        "]," +
       "[" +
        "('straight', (None,), None)," +
        "('straight', ((100,600,200,500),), 1.0)," +
        "('arc', ((29, 329, 229, 529), -45.0, 45.0), 0)," +
        "('arc', ((29, 329, 229, 529), 0.0, 90.0), 0)," +
        "('arc', ((29, 329, 229, 529), 90.0, 90.0), 0)," +
        "('arc', ((29, 329, 229, 529), -180.0, 45.0), 0)," +
        "('straight', ((58,500,158,600),), 1.0)" +
        "]," +
       "100.0," +
       "(100.0,1.000,100.00,100.0))"


  val extremeEnv = "([(0, 100), (2, 101), (190.0, 195.0), (243.1755319148936, 207.55304027162447), (362, 93), (369, 21)], [('straight', (None,), None), ('straight', ((1, 500, 2, 499),), 0.5), ('straight', ((2, 499, 190.0, 405.0),), 0.5), ('arc', ((124.27142781348194, 392.44695972837553, 362.0796360163053, 630.2551679311989), 116.56505117707799, -26.56505117707799), 0), ('arc', ((124.27142781348194, 392.44695972837553, 362.0796360163053, 630.2551679311989), 90, -87.90290447650786), -27.30929095354531), ('arc', ((361.59812965425056, -114.98737769620027, 1561.6589976680903, 1085.0734903176394), -177.90290447650787, 6.911751019089309), -6.307448288452398)], 100.0, (-1394.4496268182118, -169.27348755020273, 379.944306398132, 1605.1204456661412))"
  val multiSizeArcs = "([(0, 100), (2, 101), (28.3006993006993, 107.20875289074621), (83, 70), (182.35758774599904, 2.412811809333107), (289, 103), (324.03641813626166, 136.04702800800368), (359, 104), (370.6755001986353, 93.29843391528561), (382, 102)], [('straight', (None,), None), ('straight', ((1, 500, 2, 499),), 0.5), ('arc', ((-30.50945219144552, 492.7912471092538, 87.11085079284412, 610.4115500935434), 116.56505117707799, -26.56505117707799), 0), ('arc', ((-30.50945219144552, 492.7912471092538, 87.11085079284412, 610.4115500935434), 90, -68.45035227705453), -2.5322110715441895), ('arc', ((75.53291700005333, 383.9378466987755, 289.18225849194476, 597.5871881906669), -158.45035227705455, 68.45035227705455), 0), ('arc', ((75.53291700005333, 383.9378466987755, 289.18225849194476, 597.5871881906669), -90, 86.65260084752481), 17.097027736574372), ('arc', ((288.94012058994457, 463.9529719919963, 359.13271568257875, 534.1455670846306), 176.6526008475248, -86.65260084752481), 0), ('arc', ((288.94012058994457, 463.9529719919963, 359.13271568257875, 534.1455670846306), 90, -85.01568992414752), -11.466215572099545), ('arc', ((358.95568182961495, 483.2619293466737, 382.39531856765564, 506.7015660847144), -175.01568992414758, 85.01568992414758), 0), ('arc', ((358.95568182961495, 483.2619293466737, 382.39531856765564, 506.7015660847144), -90, 75.07620846792699), 3.7520057088165677)], 100.0, (-266.2447778060458, 83.41288723251023, 393.1204503929255, 742.7781154314815))"
  val q3Grows = "([(0, 100), " +
    "(2, 101), " +
    "(14.885964912280702, 104.0419636749753), " +
    "(39, 91), " +
    "(184.19804275276192, 12.470314181327467), " +
    "(326, 86)], " +
    "" +
    "[('straight', (None,), None), " +
    " ('straight', ((1, 500, 2, 499),), 0.5), " +
    " ('arc', ((-13.927928587256055, 495.9580363250247, 43.69985841181746, 553.5858233240982), 116.56505117707799, -26.56505117707799), 0), " +
    " ('arc', ((-13.927928587256055, 495.9580363250247, 43.69985841181746, 553.5858233240982), 90, -56.813065793699124), -1.528921023359289), " +
    " ('arc', ((10.700702925553315, 240.5350061642552, 357.69538257997056, 587.5296858186725), -146.81306579369914, 56.81306579369914), 0), " +
    " ('arc', ((10.700702925553315, 240.5350061642552, 357.69538257997056, 587.5296858186725), -90, 54.81689910688371), 1.418478393372417)], " +
    "100.0, (-267.56989336035264, -0.8143009990482142, 385.66846432127187, 652.4240566825763))"
  val q3Shrinks = "([(0, 100), (2, 101), (307.52459016393436, 173.1245720764523), (581, 116), (589.2496479176547, 114.27678251817991), (609, 129)], [('straight', (None,), None), ('straight', ((1, 500, 2, 499),), 0.5), ('arc', ((-375.6491622403866, 426.8754279235477, 990.6983425682554, 1793.2229327321897), 116.56505117707799, -26.56505117707799), 0), ('arc', ((-375.6491622403866, 426.8754279235477, 990.6983425682554, 1793.2229327321897), 90, -23.59702182575377), -0.43682735866348954), ('arc', ((568.6410567200143, 444.50603508653916, 609.8582391152951, 485.7232174818201), -113.5970218257537, 23.5970218257537), 0), ('arc', ((568.6410567200143, 444.50603508653916, 609.8582391152951, 485.7232174818201), -90, 73.40655944194458), 3.3558365255981495)], 100.0, (-143.95818861385715, -23.285682656397682, 625.011771298551, 745.6842772560105))"

  // Paul Gregg's backyard coaster: backyardrollercoasters.org
  val byrc = "([(0, 100), (1, 100), (48.0, 100.0), (103, 83), (164.60922390298248, 40.89135646981822), (220.96309149963565, 23.472888303579907), (259, 31), (298.5813723443004, 38.83274515409914), (361, 18), (424.1168889660927, -3.065795774991102), (462, 4), (581, 128)], [('straight', (None,), None), ('straight', ((0, 500, 1, 500),), 0.0), ('straight', ((1, 500, 48.0, 500.0),), 0.0), ('arc', ((-49.470588235294116, 500.0, 145.47058823529412, 694.9411764705883), 90.0, -34.35180723149348), -0.6834795321637428), ('straight', ((103, 517, 164.60922390298248, 559.1086435301818),), -0.6834795321637434), ('arc', ((121.09318924545997, 376.78730718806867, 320.83299375381137, 576.5271116964201), -124.35180723149351, 34.35180723149351), 0), ('arc', ((121.09318924545997, 376.78730718806867, 320.83299375381137, 576.5271116964201), -90, 22.38724709189559), 0.4119098878279425), ('arc', ((194.65631789163496, 561.1672548459009, 402.50642679696585, 769.0173637512318), 112.38724709189559, -22.38724709189559), 0), ('arc', ((194.65631789163496, 561.1672548459009, 402.50642679696585, 769.0173637512318), 90, -36.91373657306467), -0.7511962079597249), ('arc', ((319.02925136428996, 392.89052057138565, 529.2045265678954, 603.0657957749911), -126.91373657306467, 36.91373657306467), 0), ('arc', ((319.02925136428996, 392.89052057138565, 529.2045265678954, 603.0657957749911), -90, 21.13033171659326), 0.3864762212981113), ('arc', ((185.8696305581479, 203.71908850621236, 591.7972552178596, 609.6467131659242), -68.86966828340672, 50.09685490663594), 2.9420559022331942)], 100.0, (-177.599523497029, -43.06486810927311, 601.7293422545938, 736.2639976423496))"//
  // "([(0, 300), (48, 300), (105, 283), (175.24388685102164, 237.0092389468649), (240.25522994016774, 217.61989100799678), (295, 231), (345.468210287794, 243.33487972538745), (409, 223), (476.8116731825087, 201.2952404711075), (537, 218), (654, 358)], [('straight', (None,), None), ('straight', ((0, 300, 48, 300),), 0.0), ('arc', ((-56.05882352941177, 300.0, 152.05882352941177, 508.11764705882354), 90.0, -33.213961157234), -0.6547297297297296), ('straight', ((105, 317, 175.24388685102164, 362.9907610531351),), -0.6547297297297293), ('arc', ((121.57095138010632, 145.01155187188033, 358.9395085002292, 382.3801089920032), -123.21396115723401, 33.21396115723401), 0), ('arc', ((121.57095138010632, 145.01155187188033, 358.9395085002292, 382.3801089920032), -90, 27.468693066424905), 0.5198727674733773), ('arc', ((236.055327163472, 356.66512027461255, 454.88109341211606, 575.4908865232567), 117.4686930664249, -27.468693066424905), 0), ('arc', ((236.055327163472, 356.66512027461255, 454.88109341211606, 575.4908865232567), 90, -35.497044457246986), -0.7132152415639554), ('arc', ((360.0280801813959, 165.13757352666698, 593.5952661836214, 398.7047595288925), -125.497044457247, 35.497044457247), 0), ('arc', ((360.0280801813959, 165.13757352666698, 593.5952661836214, 398.7047595288925), -90, 31.02308633037154), 0.6014091564546294), ('arc', ((114.32700753034828, -135.94595914237, 672.1699780505688, 421.89701137785056), -58.976913669628466, 38.181855002047186), 2.633202651695736)], 11.0, (503.4650040047558, 136.57672657370415, 659.0682869279027, 292.18000949685097))"
  val phantomsRevenge = "([(0, 100), (2, 101), (118.0, 159.0), (139.4356435643564, 164.06026902264398), (181, 140), (187.9828714004555, 127.84152047320106), (236.13358132128485, 99.96862326811026), (238, 100), (279.415044872482, 101.39286659409936), (340, 134), (354.04669568468785, 153.8040197569781), (378.1387022055922, 166.25281062556905), (405, 149), (428.65693619790983, 97.2699592551312), (486.7996674026632, 59.925317964649025), (514, 66), (535.8258620920217, 76.26055424378899), (583.857442579335, 86.98750319089004), (628, 78), (673.9389682171422, 68.64674437633562), (709, 74), (743.3313148999715, 84.7339122053678), (803, 95), (865, 110), (907.0494596857374, 119.33707446161384), (955, 107), (1000.2933913102448, 95.34657675281107), (1035, 102), (1077.6731106221262, 110.18063985395747), (1100, 108), (1153, 102), (1212, 91), (1265.5223380386722, 81.86999643259105), (1272, 82), (1278.858763432291, 82.1376520910685), (1334, 73), (1394.7812736276926, 62.92771713815466), (1400, 63), (1478, 75), (1560, 87), (1616, 94), (1656, 99)], [('straight', (None,), None), ('straight', ((1, 500, 2, 499),), 0.5), ('straight', ((2, 499, 118.0, 441.0),), 0.5), ('arc', ((91.50408741299958, 435.939730977356, 187.36719971571324, 531.8028432800696), 116.56505117707799, -26.56505117707799), 0), ('arc', ((91.50408741299958, 435.939730977356, 187.36719971571324, 531.8028432800696), 90, -60.130339467619464), -1.7411862297801788), ('straight', ((181, 460, 187.9828714004555, 472.15847952679894),), -1.7411862297801757), ('arc', ((180.6067151740503, 388.9776444374206, 291.6604474685194, 500.03137673188974), -150.13033946761942, 60.13033946761942), 0), ('arc', ((180.6067151740503, 388.9776444374206, 291.6604474685194, 500.03137673188974), -90, 1.9262398122783964), 0.033631898707051924), ('straight', ((238, 500, 279.415044872482, 498.60713340590064),), 0.03363189870705278), ('arc', ((199.34117464028358, 343.71114306224524, 354.28094112195356, 498.6509095439152), -88.07376018772162, 52.72625113164853), 1.4098703496912985), ('straight', ((340, 466, 354.04669568468785, 446.1959802430219),), 1.4098703496912983), ('arc', ((348.60181062889046, 433.74718937443095, 407.67559378229396, 492.82097252783444), 144.65249094392698, -54.65249094392698), 0), ('arc', ((348.60181062889046, 433.74718937443095, 407.67559378229396, 492.82097252783444), 90, -65.42465948670178), -2.186675413591357), ('straight', ((405, 451, 428.65693619790983, 502.7300407448688),), -2.1866754135913564), ('arc', ((422.86546881283743, 412.2062848556994, 550.733865992489, 540.074682035351), -155.42465948670178, 65.42465948670178), 0), ('arc', ((422.86546881283743, 412.2062848556994, 550.733865992489, 540.074682035351), -90, 25.178682674460617), 0.47010991824875736), ('straight', ((514, 534, 535.8258620920217, 523.739445756211),), 0.4701099182487585), ('arc', ((470.95953611183256, 513.01249680911, 696.7553490468375, 738.8083097441149), 115.1786826744607, -25.178682674460703), 0), ('arc', ((470.95953611183256, 513.01249680911, 696.7553490468375, 738.8083097441149), 90, -23.016447703486023), -0.4248136474184997), ('arc', ((556.4466061963471, 296.36853158207424, 791.4313302379373, 531.3532556236644), -113.016447703486, 23.016447703485994), 0), ('arc', ((556.4466061963471, 296.36853158207424, 791.4313302379373, 531.3532556236644), -90, 17.362198547163473), 0.3126566004431337), ('straight', ((709, 526, 743.3313148999715, 515.2660877946322),), 0.3126566004431338), ('arc', ((582.7407860342114, 504.8370173274155, 1040.5317861343929, 962.6280174275969), 107.36219854716346, -15.199900812513292), 0.03775714176243938), ('arc', ((636.1023751098983, 183.4555430041741, 957.7613490779379, 505.1145169722136), -87.83770226534986, 22.876489564017064), 0.467132086020859), ('arc', ((807.6961757962407, 480.66292553838616, 1006.402743575234, 679.3694933173795), 115.03878729866717, -25.038787298667174), 0), ('arc', ((807.6961757962407, 480.66292553838616, 1006.402743575234, 679.3694933173795), 90, -28.85709216465979), -0.551052966217783), ('arc', ((906.4457070991393, 316.9580548249779, 1094.1410755213503, 504.6534232471889), -118.85709216465985, 28.857092164659846), 0), ('arc', ((906.4457070991393, 316.9580548249779, 1094.1410755213503, 504.6534232471889), -90, 21.704423414665072), 0.3980377642528301), ('arc', ((962.283772361802, 489.8193601460425, 1193.0624488824503, 720.5980366666909), 111.7044234146651, -21.7044234146651), 0), ('arc', ((962.283772361802, 489.8193601460425, 1193.0624488824503, 720.5980366666909), 90, -11.156631499961563), -0.19721885060219196), ('arc', ((837.376634808386, -153.10644611807254, 1488.6368731766565, 498.15379225019785), -101.15663149996156, 9.395630242485808), -0.03074495182733311), ('arc', ((950.8213603308507, 497.90735967820706, 1343.123039874267, 890.2090392216235), 88.2389987425243, -17.600018867440966), -0.3513910763788689), ('arc', ((1104.076747546783, 195.2388225836307, 1426.9679285305613, 518.130003567409), -109.36102012491664, 19.361020124916635), 0), ('arc', ((1104.076747546783, 195.2388225836307, 1426.9679285305613, 518.130003567409), -90, 2.299488905020283), 0.04015521429036089), ('arc', ((1107.914814985895, 517.8623479089315, 1449.802711878687, 859.7502448017235), 92.29948890502025, -2.2994889050202545), 0), ('arc', ((1107.914814985895, 517.8623479089315, 1449.802711878687, 859.7502448017235), 90, -18.818364864777976), -0.34078548121896673), ('arc', ((1206.3525848230763, 160.21490525261297, 1583.2099624323089, 537.0722828618453), -108.818364864778, 18.818364864778005), 0), ('arc', ((1206.3525848230763, 160.21490525261297, 1583.2099624323089, 537.0722828618453), -90, 1.5870684964497457), 0.0277066572075761), ('arc', ((1074.6099854854665, -96.12028893697499, 1707.8517329063748, 537.1214584839333), -88.41293150355028, 14.3181875322107), 0.2849566746771279), ('arc', ((1249.9464344738421, 512.9733696514514, 1878.234229015624, 1141.2611641932335), 105.90525602866045, -15.159211396467214), 0.013021671125593527), ('arc', ((1302.7161581441153, 5.06769330727829, 1810.669994759642, 513.0215299228047), -89.25395536780675, 12.757943433417807), 0.2401523770587775), ('arc', ((1476.950003743121, 500.98462148371095, 1839.7741727541904, 863.8087904947804), 103.50398806561108, -12.75794343341856), 0.013021671125581237)], 12, (-1109.2706497205797, -4958.22468201105, 4350.185434554962, 501.2314022644914))"
  val singleLoopByGUI = "([(0, 100), (2, 101), (164.4, 182.2), (220.0, 210.0), (151, 203), (244.09464430046552, 178.0911346337541), (420.74640179146127, 154.8667044524817), (538, 165)], [('straight', (None,), None), ('straight', ((1, 500, 2, 499),), 0.5), ('straight', ((2, 499, 164.4, 417.8),), 0.4999999999999999), ('straight', ((164.4, 417.8, 220.0, 390.0),), 0.5000000000000002), ('arc', ((78.4955729838729, 204.76830025660024, 274.0498815615816, 400.322608834309), -63.434948822921996, 318.4554906359083), -0.26756496631376353), ('straight', ((151, 397, 244.09464430046552, 421.9088653662459),), -0.2675649663137639), ('arc', ((-262.6980860629915, -921.7556801613872, 1104.190889645914, 445.1332955475183), -104.9794581870137, 14.979458187013705), 0), ('arc', ((-262.6980860629915, -921.7556801613872, 1104.190889645914, 445.1332955475183), -90, 9.878691583759348), 0.17414473359160754)], 100.0, (281.30983902267633, 0.04725063108679706, 719.5111502535428, 438.2485618619533))"
  val steelPhantom = "([(0, 100), (2, 101), (118.0, 159.0), (139.4356435643564, 164.06026902264398), (181, 140), (187.9828714004555, 127.84152047320106), (236.13358132128485, 99.96862326811026), (238, 100), (279.415044872482, 101.39286659409936), (340, 134), (354.04669568468785, 153.8040197569781), (378.1387022055922, 166.25281062556905), (405, 149), (428.65693619790983, 97.2699592551312), (486.7996674026632, 59.925317964649025), (520, 77), (531.902335009532, 93.64515236371119), (544.9544590456459, 111.89825926056676), (518, 105), (548.0955732207696, 90.50143763558162), (567.5747692909781, 81.11732200631866), (593.6165949498975, 75.1714876749254), (628, 86), (652.9107753530863, 103.418103369839), (670.0951492146196, 115.4337550717064), (646, 114), (677.4781347029492, 97.1559418520456), (699.5728658636158, 85.33297521359293), (731.5996825380702, 77.30283673472877), (761, 84), (787.9784989349231, 96.96365880398429), (817.8479330668039, 111.31646448408611), (777, 124), (795.7032128592642, 91.38867342730907), (843.6641958604171, 63.606280371138155), (856, 65), (894.3635092636314, 73.78083196961256), (949, 101), (1019.3444667179033, 126.65312611901999), (1092, 99), (1173.4740395751692, 67.99049817650484), (1175, 68), (1230, 76), (1285, 84), (1339, 93), (1395.1660651674779, 102.0019348144433), (1396, 102)], [('straight', (None,), None), ('straight', ((1, 500, 2, 499),), 0.5), ('straight', ((2, 499, 118.0, 441.0),), 0.5), ('arc', ((91.50408741299958, 435.939730977356, 187.36719971571324, 531.8028432800696), 116.56505117707799, -26.56505117707799), 0), ('arc', ((91.50408741299958, 435.939730977356, 187.36719971571324, 531.8028432800696), 90, -60.130339467619464), -1.7411862297801788), ('straight', ((181, 460, 187.9828714004555, 472.15847952679894),), -1.7411862297801757), ('arc', ((180.6067151740503, 388.9776444374206, 291.6604474685194, 500.03137673188974), -150.13033946761942, 60.13033946761942), 0), ('arc', ((180.6067151740503, 388.9776444374206, 291.6604474685194, 500.03137673188974), -90, 1.9262398122783964), 0.033631898707051924), ('straight', ((238, 500, 279.415044872482, 498.60713340590064),), 0.03363189870705278), ('arc', ((199.34117464028358, 343.71114306224524, 354.28094112195356, 498.6509095439152), -88.07376018772162, 52.72625113164853), 1.4098703496912985), ('straight', ((340, 466, 354.04669568468785, 446.1959802430219),), 1.4098703496912983), ('arc', ((348.60181062889046, 433.74718937443095, 407.67559378229396, 492.82097252783444), 144.65249094392698, -54.65249094392698), 0), ('arc', ((348.60181062889046, 433.74718937443095, 407.67559378229396, 492.82097252783444), 90, -65.42465948670178), -2.186675413591357), ('straight', ((405, 451, 428.65693619790983, 502.7300407448688),), -2.1866754135913564), ('arc', ((422.86546881283743, 412.2062848556994, 550.733865992489, 540.074682035351), -155.42465948670178, 65.42465948670178), 0), ('arc', ((445.9846511026109, 458.44464943524633, 527.6146837027155, 540.074682035351), -90.0, 54.432838006788394), 1.3984778911348854), ('straight', ((520, 523, 531.902335009532, 506.3548476362888),), 1.3984778911348879), ('straight', ((531.902335009532, 506.3548476362888, 544.9544590456459, 488.10174073943324),), 1.398477891134887), ('arc', ((505.7703095115258, 453.9257684926, 548.9857162011838, 497.14117518225794), -35.56716199321155, 279.8446890865685), -0.4817506633969889), ('straight', ((518, 495, 548.0955732207696, 509.4985623644184),), -0.4817506633969886), ('straight', ((548.0955732207696, 509.4985623644184, 567.5747692909781, 518.8826779936813),), -0.48175066339698747), ('arc', ((533.6141133991946, 404.82354922366875, 653.6190765006004, 524.8285123250746), -115.72247290664302, 25.72247290664302), 0), ('arc', ((533.6141133991946, 404.82354922366875, 653.6190765006004, 524.8285123250746), -90, 34.96200158186264), 0.6992196398126572), ('straight', ((628, 514, 652.9107753530863, 496.581896630161),), 0.6992196398126578), ('straight', ((652.9107753530863, 496.581896630161, 670.0951492146196, 484.5662449282936),), 0.6992196398126579), ('arc', ((633.8191510786709, 442.6056842185965, 679.9415108355166, 488.72804397544223), -55.037998418137306, 296.8866096193185), -0.5351034394797309), ('straight', ((646, 486, 677.4781347029492, 502.8440581479544),), -0.5351034394797309), ('straight', ((677.4781347029492, 502.8440581479544, 699.5728658636158, 514.6670247864071),), -0.5351034394797306), ('arc', ((663.7179073259543, 386.9336128410395, 799.481457750186, 522.6971632652712), -118.15138879881877, 28.151388798818772), 0), ('arc', ((663.7179073259543, 386.9336128410395, 799.481457750186, 522.6971632652712), -90, 25.665130229732966), 0.48051816504895), ('straight', ((761, 516, 787.9784989349231, 503.0363411960157),), 0.4805181650489496), ('straight', ((787.9784989349231, 503.0363411960157, 817.8479330668039, 488.6835355159139),), 0.48051816504894984), ('arc', ((772.8372562987236, 428.9668366420441, 835.652612311952, 491.7821926552725), -64.33486977026703, 274.1699566102605), -1.7436216343192419), ('straight', ((777, 476, 795.7032128592642, 508.6113265726909),), -1.7436216343192406), ('arc', ((788.375271537858, 425.8158709837438, 898.9531201829761, 536.3937196288618), -150.16491316000648, 60.16491316000648), 0), ('arc', ((788.375271537858, 425.8158709837438, 898.9531201829761, 536.3937196288618), -90, 12.892074887255433), 0.22888500395705072), ('straight', ((856, 535, 894.3635092636314, 526.2191680303874),), 0.2288850039570492), ('arc', ((735.4905694911531, 269.7093978947315, 995.2746497747582, 529.4934781783367), -77.10792511274467, 27.179592555755413), 0.8412334013220233), ('arc', ((910.0707109289784, 473.34687388098, 1128.6182225068283, 691.8943854588299), 130.07166744301074, -40.07166744301074), 0), ('arc', ((910.0707109289784, 473.34687388098, 1128.6182225068283, 691.8943854588299), 90, -41.67424210322477), -0.8901613915003411), ('arc', ((1050.9372705020273, 286.93596367721153, 1296.010808648311, 532.0095018234952), -131.6742421032248, 41.6742421032248), 0), ('arc', ((1050.9372705020273, 286.93596367721153, 1296.010808648311, 532.0095018234952), -90, 0.7135274796063982), 0.012454047650648375), ('arc', ((961.2133701752555, 109.70222669851972, 1383.5275171518147, 532.016373675079), -89.28647252039359, 15.124730694937242), 0.28369281187599815), ('arc', ((1076.4724828481828, 515.9836263249209, 1498.7866298247493, 938.2977733014876), 105.8382581745437, -15.124730694936986), 0.012454047650653945), ('arc', ((1102.7986213030067, 156.0933183741414, 1462.7192575254467, 516.0139545965816), -89.28647252039326, 17.497589456837886), 0.32899828595041897), ('arc', ((1215.4457176256733, 497.9980651855567, 1574.8864127092825, 857.4387602691659), 108.21111693644458, -18.211116936444583), 0), ('arc', ((1215.4457176256733, 497.9980651855567, 1574.8864127092825, 857.4387602691659), 90, -0.2658637066519276), -0.004640230346276341)], 12.0, (-718.873281334075, -3751.441971898055, 3530.5915647851616, 498.0228742211816))"

  //"([(0, 100), (2, 101), (118.0, 159.0), (139.4356435643564, 164.06026902264398), (181, 140), (187.9828714004555, 127.84152047320106), (236.13358132128485, 99.96862326811026), (238, 100), (279.415044872482, 101.39286659409936), (340, 134), (354.04669568468785, 153.8040197569781), (378.1387022055922, 166.25281062556905), (405, 149), (428.65693619790983, 97.2699592551312), (486.7996674026632, 59.925317964649025), (520, 77), (531.902335009532, 93.64515236371119), (544.9544590456459, 111.89825926056676), (518, 105), (548.0955732207696, 90.50143763558162), (567.5747692909781, 81.11732200631866), (593.6165949498975, 75.1714876749254), (628, 86), (652.9107753530863, 103.418103369839), (670.0951492146196, 115.4337550717064), (646, 114), (677.4781347029492, 97.1559418520456), (699.5728658636158, 85.33297521359293), (731.5996825380702, 77.30283673472877), (761, 84), (787.9784989349231, 96.96365880398429), (817.8479330668039, 111.31646448408611), (777, 124), (795.7032128592642, 91.38867342730907), (843.6641958604171, 63.606280371138155), (856, 65), (894.3635092636314, 73.78083196961256), (962, 111), (1020.5443215492639, 135.10294896027506), (1077, 113), (1094.9332363824626, 96.4159200006028), (1119.2418406112727, 73.9361049462209), (1180.4153875104078, 49.98606445542339), (1182, 50), (1250, 66), (1324, 83), (1385, 92), (1461, 105)], [('straight', (None,), None), ('straight', ((1, 500, 2, 499),), 0.5), ('straight', ((2, 499, 118.0, 441.0),), 0.5), ('arc', ((91.50408741299958, 435.939730977356, 187.36719971571324, 531.8028432800696), 116.56505117707799, -26.56505117707799), 0), ('arc', ((91.50408741299958, 435.939730977356, 187.36719971571324, 531.8028432800696), 90, -60.130339467619464), -1.7411862297801788), ('straight', ((181, 460, 187.9828714004555, 472.15847952679894),), -1.7411862297801757), ('arc', ((180.6067151740503, 388.9776444374206, 291.6604474685194, 500.03137673188974), -150.13033946761942, 60.13033946761942), 0), ('arc', ((180.6067151740503, 388.9776444374206, 291.6604474685194, 500.03137673188974), -90, 1.9262398122783964), 0.033631898707051924), ('straight', ((238, 500, 279.415044872482, 498.60713340590064),), 0.03363189870705278), ('arc', ((199.34117464028358, 343.71114306224524, 354.28094112195356, 498.6509095439152), -88.07376018772162, 52.72625113164853), 1.4098703496912985), ('straight', ((340, 466, 354.04669568468785, 446.1959802430219),), 1.4098703496912983), ('arc', ((348.60181062889046, 433.74718937443095, 407.67559378229396, 492.82097252783444), 144.65249094392698, -54.65249094392698), 0), ('arc', ((348.60181062889046, 433.74718937443095, 407.67559378229396, 492.82097252783444), 90, -65.42465948670178), -2.186675413591357), ('straight', ((405, 451, 428.65693619790983, 502.7300407448688),), -2.1866754135913564), ('arc', ((422.86546881283743, 412.2062848556994, 550.733865992489, 540.074682035351), -155.42465948670178, 65.42465948670178), 0), ('arc', ((445.9846511026109, 458.44464943524633, 527.6146837027155, 540.074682035351), -90.0, 54.432838006788394), 1.3984778911348854), ('straight', ((520, 523, 531.902335009532, 506.3548476362888),), 1.3984778911348879), ('straight', ((531.902335009532, 506.3548476362888, 544.9544590456459, 488.10174073943324),), 1.398477891134887), ('arc', ((505.7703095115258, 453.9257684926, 548.9857162011838, 497.14117518225794), -35.56716199321155, 279.8446890865685), -0.4817506633969889), ('straight', ((518, 495, 548.0955732207696, 509.4985623644184),), -0.4817506633969886), ('straight', ((548.0955732207696, 509.4985623644184, 567.5747692909781, 518.8826779936813),), -0.48175066339698747), ('arc', ((533.6141133991946, 404.82354922366875, 653.6190765006004, 524.8285123250746), -115.72247290664302, 25.72247290664302), 0), ('arc', ((533.6141133991946, 404.82354922366875, 653.6190765006004, 524.8285123250746), -90, 34.96200158186264), 0.6992196398126572), ('straight', ((628, 514, 652.9107753530863, 496.581896630161),), 0.6992196398126578), ('straight', ((652.9107753530863, 496.581896630161, 670.0951492146196, 484.5662449282936),), 0.6992196398126579), ('arc', ((633.8191510786709, 442.6056842185965, 679.9415108355166, 488.72804397544223), -55.037998418137306, 296.8866096193185), -0.5351034394797309), ('straight', ((646, 486, 677.4781347029492, 502.8440581479544),), -0.5351034394797309), ('straight', ((677.4781347029492, 502.8440581479544, 699.5728658636158, 514.6670247864071),), -0.5351034394797306), ('arc', ((663.7179073259543, 386.9336128410395, 799.481457750186, 522.6971632652712), -118.15138879881877, 28.151388798818772), 0), ('arc', ((663.7179073259543, 386.9336128410395, 799.481457750186, 522.6971632652712), -90, 25.665130229732966), 0.48051816504895), ('straight', ((761, 516, 787.9784989349231, 503.0363411960157),), 0.4805181650489496), ('straight', ((787.9784989349231, 503.0363411960157, 817.8479330668039, 488.6835355159139),), 0.48051816504894984), ('arc', ((772.8372562987236, 428.9668366420441, 835.652612311952, 491.7821926552725), -64.33486977026703, 274.1699566102605), -1.7436216343192419), ('straight', ((777, 476, 795.7032128592642, 508.6113265726909),), -1.7436216343192406), ('arc', ((788.375271537858, 425.8158709837438, 898.9531201829761, 536.3937196288618), -150.16491316000648, 60.16491316000648), 0), ('arc', ((788.375271537858, 425.8158709837438, 898.9531201829761, 536.3937196288618), -90, 12.892074887255433), 0.22888500395705072), ('straight', ((856, 535, 894.3635092636314, 526.2191680303874),), 0.2288850039570492), ('arc', ((722.3567616151474, 248.50408726030415, 1003.6168352590817, 529.7641609042383), -77.10792511274467, 31.862276635749446), 0.9914618046754452), ('arc', ((937.3928835063174, 464.89705103972494, 1103.6957595922106, 631.199927125618), 134.75435152300486, -44.75435152300486), 0), ('arc', ((937.3928835063174, 464.89705103972494, 1103.6957595922106, 631.199927125618), 90, -42.761655729994914), -0.9247678247087184), ('straight', ((1077, 487, 1094.9332363824626, 503.5840799993972),), -0.924767824708719), ('straight', ((1094.9332363824626, 503.5840799993972, 1119.2418406112727, 526.0638950537791),), -0.9247678247087214), ('arc', ((1090.3151790913487, 369.81351870645864, 1270.5155959294668, 550.0139355445766), -132.76165572999508, 42.761655729995084), 0), ('arc', ((1090.3151790913487, 369.81351870645864, 1270.5155959294668, 550.0139355445766), -90, 1.0077256260250351), 0.017589943939628785), ('arc', ((1014.253688220368, 220.33127872217722, 1343.947905934593, 550.0254964364025), -88.992274373975, 24.465588578323974), 0.476403942742479), ('arc', ((1150.3138224023699, 516.9956775730416, 1500.1455298046978, 866.8273849753696), 115.47331420434901, -25.070515774325017), 0.007030274645564146), ('arc', ((1100.6448137522787, 73.4136040672708, 1544.2366905875285, 517.0054809025207), -89.59720156997604, 15.980253514736603), 0.293994611227601), ('arc', ((1146.9330742516265, 494.5363494717299, 1810.1254202836542, 1157.7286955037575), 106.3830519447606, -13.352799070841755), 0.05293725646742891)], 12.0, (-693.5637611337538, -3594.909092370651, 3399.2066657831747, 497.8613345462775))"
    //"([(0, 100), (2, 101), (118.0, 159.0), (139.4356435643564, 164.06026902264398), (181, 140), (187.9828714004555, 127.84152047320106), (236.13358132128485, 99.96862326811026), (238, 100), (279.415044872482, 101.39286659409936), (340, 134), (354.04669568468785, 153.8040197569781), (378.1387022055922, 166.25281062556905), (405, 149), (428.65693619790983, 97.2699592551312), (486.7996674026632, 59.925317964649025), (520, 77), (531.902335009532, 93.64515236371119), (544.9544590456459, 111.89825926056676), (518, 105), (548.0955732207696, 90.50143763558162), (567.5747692909781, 81.11732200631866), (593.6165949498975, 75.1714876749254), (628, 86), (652.9107753530863, 103.418103369839), (670.0951492146196, 115.4337550717064), (646, 114), (677.4781347029492, 97.1559418520456), (699.5728658636158, 85.33297521359293), (731.5996825380702, 77.30283673472877), (761, 84), (787.9784989349231, 96.96365880398429), (817.8479330668039, 111.31646448408611), (777, 119), (802.0423676816634, 92.17262242064902), (841.14872240605, 75.18047826417694), (861, 79), (901, 97), (933, 119), (972.4556779374889, 134.28149883739667), (1014, 117), (1027.9637452902418, 102.9519622229887), (1050.4093360603645, 80.37087810035223), (1111.434573848465, 54.98575870184436), (1113, 55), (1188, 69), (1263, 83), (1326, 91), (1408, 101)], [('straight', (None,), None), ('straight', ((1, 500, 2, 499),), 0.5), ('straight', ((2, 499, 118.0, 441.0),), 0.5), ('arc', ((91.50408741299958, 435.939730977356, 187.36719971571324, 531.8028432800696), 116.56505117707799, -26.56505117707799), 0), ('arc', ((91.50408741299958, 435.939730977356, 187.36719971571324, 531.8028432800696), 90, -60.130339467619464), -1.7411862297801788), ('straight', ((181, 460, 187.9828714004555, 472.15847952679894),), -1.7411862297801757), ('arc', ((180.6067151740503, 388.9776444374206, 291.6604474685194, 500.03137673188974), -150.13033946761942, 60.13033946761942), 0), ('arc', ((180.6067151740503, 388.9776444374206, 291.6604474685194, 500.03137673188974), -90, 1.9262398122783964), 0.033631898707051924), ('straight', ((238, 500, 279.415044872482, 498.60713340590064),), 0.03363189870705278), ('arc', ((199.34117464028358, 343.71114306224524, 354.28094112195356, 498.6509095439152), -88.07376018772162, 52.72625113164853), 1.4098703496912985), ('straight', ((340, 466, 354.04669568468785, 446.1959802430219),), 1.4098703496912983), ('arc', ((348.60181062889046, 433.74718937443095, 407.67559378229396, 492.82097252783444), 144.65249094392698, -54.65249094392698), 0), ('arc', ((348.60181062889046, 433.74718937443095, 407.67559378229396, 492.82097252783444), 90, -65.42465948670178), -2.186675413591357), ('straight', ((405, 451, 428.65693619790983, 502.7300407448688),), -2.1866754135913564), ('arc', ((422.86546881283743, 412.2062848556994, 550.733865992489, 540.074682035351), -155.42465948670178, 65.42465948670178), 0), ('arc', ((445.9846511026109, 458.44464943524633, 527.6146837027155, 540.074682035351), -90.0, 54.432838006788394), 1.3984778911348854), ('straight', ((520, 523, 531.902335009532, 506.3548476362888),), 1.3984778911348879), ('straight', ((531.902335009532, 506.3548476362888, 544.9544590456459, 488.10174073943324),), 1.398477891134887), ('arc', ((505.7703095115258, 453.9257684926, 548.9857162011838, 497.14117518225794), -35.56716199321155, 279.8446890865685), -0.4817506633969889), ('straight', ((518, 495, 548.0955732207696, 509.4985623644184),), -0.4817506633969886), ('straight', ((548.0955732207696, 509.4985623644184, 567.5747692909781, 518.8826779936813),), -0.48175066339698747), ('arc', ((533.6141133991946, 404.82354922366875, 653.6190765006004, 524.8285123250746), -115.72247290664302, 25.72247290664302), 0), ('arc', ((533.6141133991946, 404.82354922366875, 653.6190765006004, 524.8285123250746), -90, 34.96200158186264), 0.6992196398126572), ('straight', ((628, 514, 652.9107753530863, 496.581896630161),), 0.6992196398126578), ('straight', ((652.9107753530863, 496.581896630161, 670.0951492146196, 484.5662449282936),), 0.6992196398126579), ('arc', ((633.8191510786709, 442.6056842185965, 679.9415108355166, 488.72804397544223), -55.037998418137306, 296.8866096193185), -0.5351034394797309), ('straight', ((646, 486, 677.4781347029492, 502.8440581479544),), -0.5351034394797309), ('straight', ((677.4781347029492, 502.8440581479544, 699.5728658636158, 514.6670247864071),), -0.5351034394797306), ('arc', ((663.7179073259543, 386.9336128410395, 799.481457750186, 522.6971632652712), -118.15138879881877, 28.151388798818772), 0), ('arc', ((663.7179073259543, 386.9336128410395, 799.481457750186, 522.6971632652712), -90, 25.665130229732966), 0.48051816504895), ('straight', ((761, 516, 787.9784989349231, 503.0363411960157),), 0.4805181650489496), ('straight', ((787.9784989349231, 503.0363411960157, 817.8479330668039, 488.6835355159139),), 0.48051816504894984), ('arc', ((767.5612967011201, 421.9670998421696, 837.7396008908996, 492.1454040319492), -64.33486977026695, 287.3639098532111), -1.0712795978550602), ('straight', ((777, 481, 802.0423676816634, 507.827377579351),), -1.0712795978550604), ('arc', ((787.6522382036308, 417.82655333098467, 894.6452066084692, 524.8195217358231), -136.97095991705578, 46.97095991705578), 0), ('arc', ((787.6522382036308, 417.82655333098467, 894.6452066084692, 524.8195217358231), -90, 21.782011009472), 0.3996073151070473), ('arc', ((156.3403302426343, -470.198164428739, 1184.2330421133001, 557.6945474419268), -68.217988990528, 4.891468616964339), 0.5023677850695831), ('arc', ((694.6301119065569, 233.29451648517104, 979.4932682393454, 518.1576728179596), -63.326520373563675, 15.670086722464148), 0.9113208977050203), ('arc', ((913.87913556839, 465.71850116260333, 1031.0322203065878, 582.8715859008012), 132.3435663489005, -42.34356634890051), 0), ('arc', ((913.87913556839, 465.71850116260333, 1031.0322203065878, 582.8715859008012), 90, -45.17241277170476), -1.0060365242288092), ('straight', ((1014, 483, 1027.9637452902418, 497.0480377770113),), -1.0060365242288096), ('straight', ((1027.9637452902418, 497.0480377770113, 1050.4093360603645, 519.6291218996478),), -1.0060365242288116), ('arc', ((1025.390386594662, 372.9258667905494, 1197.4787611022682, 545.0142412981556), -135.1724127717047, 45.1724127717047), 0), ('arc', ((1025.390386594662, 372.9258667905494, 1197.4787611022682, 545.0142412981556), -90, 1.0424557797678347), 0.018196293559709375), ('arc', ((878.4232762266336, 84.26761178978839, 1339.1937958351448, 545.0381313982996), -88.95754422023217, 19.06213527758571), 0.366038895697821), ('arc', ((1036.806204164852, 516.9618686017004, 1497.5767237733733, 977.7323882102216), 110.10459105735353, -19.062135277585256), 0.018196293559716796), ('arc', ((963.3740230154983, -71.49569439489318, 1551.9184228287534, 517.0487054183618), -88.95754422023174, 12.38893249239915), 0.23881260062205148), ('arc', ((1044.9584556572506, 498.98744514761955, 1777.1051525345185, 1231.1341420248875), 103.43138827216741, -12.95686160798698), 0.008282242045596747)], 69.29206299303193, (-748.6655155384788, -3778.8282720010566, 3529.236113924525, 499.0733574619471))"
  //val steelPhantom = "([(0, 100), (2, 101), (118.0, 159.0), (139.4356435643564, 164.06026902264398), (181, 140), (187.9828714004555, 127.84152047320106), (236.13358132128485, 99.96862326811026), (238, 100), (279.415044872482, 101.39286659409936), (340, 134), (354.04669568468785, 153.8040197569781), (378.1387022055922, 166.25281062556905), (405, 149), (428.65693619790983, 97.2699592551312), (486.7996674026632, 59.925317964649025), (514, 66), (527, 74), (540.7530598201021, 84.75911533371891), (555.6666450263082, 96.42611783146742), (532, 94), (562.8642509035957, 78.7256965475126), (583.3986634566597, 73.92258958110142), (608, 81), (624.7011807976241, 91.47637046999932), (642.8376128490253, 102.85304996810271), (615, 99), (665.0924106132192, 84.315229327417), (692.5752107312837, 80.36990585492129), (744, 95), (758.5964264798579, 104.03662045975545), (780.1466733864697, 117.37833819990237), (749, 114), (792.2734554879127, 98.77735255492212), (848.9443430707709, 78.84178391713533), (877.5851009265898, 73.95108183376726), (891, 75), (923, 88), (957.7303523954123, 99.04284579057719), (960, 99), (962.522072102839, 98.95238900835517), (988, 104), (1013.2585536327244, 109.00414921748006), (1014, 109)], [('straight', (None,), None), ('straight', ((1, 500, 2, 499),), 0.5), ('straight', ((2, 499, 118.0, 441.0),), 0.5), ('arc', ((91.50408741299958, 435.939730977356, 187.36719971571324, 531.8028432800696), 116.56505117707799, -26.56505117707799), 0), ('arc', ((91.50408741299958, 435.939730977356, 187.36719971571324, 531.8028432800696), 90, -60.130339467619464), -1.7411862297801788), ('straight', ((181, 460, 187.9828714004555, 472.15847952679894),), -1.7411862297801757), ('arc', ((180.6067151740503, 388.9776444374206, 291.6604474685194, 500.03137673188974), -150.13033946761942, 60.13033946761942), 0), ('arc', ((180.6067151740503, 388.9776444374206, 291.6604474685194, 500.03137673188974), -90, 1.9262398122783964), 0.033631898707051924), ('straight', ((238, 500, 279.415044872482, 498.60713340590064),), 0.03363189870705278), ('arc', ((199.34117464028358, 343.71114306224524, 354.28094112195356, 498.6509095439152), -88.07376018772162, 52.72625113164853), 1.4098703496912985), ('straight', ((340, 466, 354.04669568468785, 446.1959802430219),), 1.4098703496912983), ('arc', ((348.60181062889046, 433.74718937443095, 407.67559378229396, 492.82097252783444), 144.65249094392698, -54.65249094392698), 0), ('arc', ((348.60181062889046, 433.74718937443095, 407.67559378229396, 492.82097252783444), 90, -65.42465948670178), -2.186675413591357), ('straight', ((405, 451, 428.65693619790983, 502.7300407448688),), -2.1866754135913564), ('arc', ((422.86546881283743, 412.2062848556994, 550.733865992489, 540.074682035351), -155.42465948670178, 65.42465948670178), 0), ('arc', ((422.86546881283743, 412.2062848556994, 550.733865992489, 540.074682035351), -90, 25.178682674460617), 0.47010991824875736), ('arc', ((416.83703534799747, 404.1497853201368, 553.1637645628485, 540.4765145349879), -64.82131732553941, 12.857639143576577), 0.7823070265420397), ('straight', ((527, 526, 540.7530598201021, 515.2408846662811),), 0.7823070265420442), ('straight', ((540.7530598201021, 515.2408846662811, 555.6666450263082, 503.5738821685326),), 0.7823070265420438), ('arc', ((519.5725170123573, 463.650508091994, 564.2390202382634, 508.31701131790027), -51.96367818196283, 295.63348815827135), -0.4948865760648663), ('straight', ((532, 506, 562.8642509035957, 521.2743034524874),), -0.4948865760648655), ('arc', ((537.1023870526267, 433.4848576108324, 629.6949398606928, 526.0774104188986), -116.33019002369144, 26.330190023691443), 0), ('arc', ((537.1023870526267, 433.4848576108324, 629.6949398606928, 526.0774104188986), -90, 32.099358689050604), 0.6272832200876273), ('straight', ((608, 519, 624.7011807976241, 508.5236295300007),), 0.6272832200876274), ('straight', ((624.7011807976241, 508.5236295300007, 642.8376128490253, 497.1469500318973),), 0.6272832200876292), ('arc', ((590.3828144835293, 433.87712521353353, 658.8889811340046, 502.3832918640088), -57.900641310949474, 311.5619521272565), -0.293153603366569), ('straight', ((615, 501, 665.0924106132192, 515.684770672583),), -0.29315360336656976), ('arc', ((594.8810818460191, 324.2418363745495, 790.2693396165483, 519.6300941450787), -106.33868918369298, 16.338689183692978), 0), ('arc', ((594.8810818460191, 324.2418363745495, 790.2693396165483, 519.6300941450787), -90, 31.76157264821491), 0.6190981383166216), ('straight', ((744, 505, 758.5964264798579, 495.96337954024455),), 0.6190981383166216), ('straight', ((758.5964264798579, 495.96337954024455, 780.1466733864697, 482.6216618000976),), 0.6190981383166212), ('arc', ((724.7514477514358, 415.4729768219341, 797.3349720931169, 488.05650116361534), -58.238427351784985, 308.8576795886342), -0.3517779496331176), ('straight', ((749, 486, 792.2734554879127, 501.2226474450779),), -0.3517779496331173), ('straight', ((792.2734554879127, 501.2226474450779, 848.9443430707709, 521.1582160828647),), -0.35177794963311804), ('arc', ((791.2772495145347, 353.4332153421225, 963.8929523386449, 526.0489181662327), -109.38074776315082, 19.380747763150822), 0), ('arc', ((791.2772495145347, 353.4332153421225, 963.8929523386449, 526.0489181662327), -90, 8.941782545492657), 0.15734303213402587), ('arc', ((803.4053121627011, 374.2987921793608, 955.0278710179913, 525.921351034651), -81.0582174545073, 26.335331596517904), 0.7074399590775756), ('arc', ((897.5945030929938, 500.9571542094228, 1017.8662016978308, 621.2288528142598), 125.27711414201063, -35.27711414201063), 0), ('arc', ((897.5945030929938, 500.9571542094228, 1017.8662016978308, 621.2288528142598), 90, -2.162971390737269), -0.037768916045949855), ('arc', ((895.6980648870937, 367.39959656015395, 1029.3460793185845, 501.04761099164483), -92.16297139073721, 2.162971390737212), 0), ('arc', ((895.6980648870937, 367.39959656015395, 1029.3460793185845, 501.04761099164483), -90, 22.41231470153305), 0.41242172503454216), ('arc', ((947.0099255250768, 490.99585078251994, 1079.507181740372, 623.4931069978152), 112.412314701533, -22.412314701533006), 0), ('arc', ((947.0099255250768, 490.99585078251994, 1079.507181740372, 623.4931069978152), 90, -0.6412605922156587), -0.011192576041014155)], 13.5, (-440.08771998785596, -2449.999669809117, 2501.004051572933, 491.0921017516714))"

  val phantomJustLoops = "([ (554, 74),\n (566.3646248121352, 79.11932795969688),\n (587.1806951889328, 83.25820821300124),\n (616, 75),\n (644.7911078440376, 66.74987166353401),\n (650, 67),\n (737.5365249576256, 75.42634836432774),\n (755, 81),\n (774.5725368731753, 86.22681195660812),\n (801, 76),\n (822.4260132343007, 67.7086325208196),\n (840, 73),\n (856.665140664223, 84.03591313579977),\n (867.870825037044, 87.40984272063554),\n (885, 78),\n (898.6184407714723, 56.57052089281319),\n (924.5623530423816, 42.31833802030542),\n (931, 43),\n (984.4039126336075, 54.437781847743395),\n (993.0686804694133, 55.355266580198304),\n (1018, 47),\n (1032.5602629682746, 42.120399526849155),\n (1044, 45),\n (1066.5998326600113, 50.68880985991336),\n (1085, 47),\n (1105.3622726145268, 42.917833212990786),\n (1116, 44),\n (1136.9374123847576, 48.304435442903014),\n (1146.063499874167, 49.23282441345191),\n (1169, 43),\n (1177.4988638319862, 40.69049655841138),\n (1184, 42),\n (1188.0, 42.80570743805163),\n (1192, 42)], \n[('straight', (None,), None), \n('straight', ((554, 526, 566.3646248121352, 520.8806720403031),), 0.4140301899555053), \n('arc', ((532.7651180139989, 516.7417917869988, 641.5962723638667, 625.5729461368666), 112.49103158929172, -22.491031589291723), 0), \n('arc', ((532.7651180139989, 516.7417917869988, 641.5962723638667, 625.5729461368666), 90, -31.979444261190096), -0.6243706142530647), \n('arc', ((590.4287711704121, 424.52545498921506, 699.153444517663, 533.250128336466), -121.97944426119014, 31.97944426119014), 0), \n('arc', ((590.4287711704121, 424.52545498921506, 699.153444517663, 533.250128336466), -90, 5.4984044308156115), 0.09626094214279941), \n('straight', ((650, 533, 737.5365249576256, 524.5736516356723),), 0.09626094214279966), \n('arc', ((690.0182667658223, 438.04662276060697, 776.7448158305294, 524.7731718253141), -84.50159556918446, 24.40525058162565), 0.5751103919643095), \n('arc', ((735.3130641497801, 513.7731880433919, 813.8320095965705, 592.2921334901823), 119.90365501244118, -29.903655012441178), 0), \n('arc', ((735.3130641497801, 513.7731880433919, 813.8320095965705, 592.2921334901823), 90, -42.3105508158249), -0.9102666593017646), \n('arc', ((790.5964737092104, 468.6322884289997, 854.2555527593911, 532.2913674791804), -132.31055081582502, 42.310550815825025), 0), \n('arc', ((790.5964737092104, 468.6322884289997, 854.2555527593911, 532.2913674791804), -90, 33.513140105834054), 0.6622154206889976), \n('straight', ((840, 527, 856.665140664223, 515.9640868642002),), 0.6622154206889975), \n('arc', ((847.5753861929372, 512.5901572793645, 888.1662638811508, 553.1810349675781), 123.51314010583418, -33.51314010583418), 0), \n('arc', ((847.5753861929372, 512.5901572793645, 888.1662638811508, 553.1810349675781), 90, -57.56402859145693), -1.5735633371536226), \n('straight', ((885, 522, 898.6184407714723, 543.4294791071868),), -1.5735633371536208), \n('arc', ((893.8228056905776, 496.2025672760867, 955.3019003941855, 557.6816619796946), -147.5640285914569, 57.56402859145689), 0), \n('arc', ((893.8228056905776, 496.2025672760867, 955.3019003941855, 557.6816619796946), -90, 12.088690801570664), 0.21417497864277255), \n('straight', ((931, 557, 984.4039126336075, 545.5622181522566),), 0.21417497864277268), \n('arc', ((951.6947059512966, 544.6447334198017, 1034.44265498753, 627.3926824560351), 102.08869080157075, -12.088690801570749), 0), \n('arc', ((951.6947059512966, 544.6447334198017, 1034.44265498753, 627.3926824560351), 90, -37.055230503180155), -0.755066478599419), \n('arc', ((1008.3972439075545, 509.5535623517107, 1056.7232820289946, 557.8796004731508), -127.0552305031804, 37.0552305031804), 0), \n('arc', ((1008.3972439075545, 509.5535623517107, 1056.7232820289946, 557.8796004731508), -90, 28.257819793189057), 0.537495279936224), \n('arc', ((1018.8644532698634, 549.3111901400866, 1114.3352120501593, 644.7819489203825), 118.25781979318901, -28.257819793189014), 0), \n('arc', ((1018.8644532698634, 549.3111901400866, 1114.3352120501593, 644.7819489203825), 90, -22.672415061762734), -0.41774348232405206), \n('arc', ((1052.5366221440754, 451.43086584610626, 1158.1879230849781, 557.0821667870092), -112.67241506176273, 22.672415061762734), 0), \n('arc', ((1052.5366221440754, 451.43086584610626, 1158.1879230849781, 557.0821667870092), -90, 11.61733475845017), 0.20558583667371555), \n('straight', ((1116, 556, 1136.9374123847576, 551.695564557097),), 0.2055858366737156), \n('arc', ((1100.7444678658235, 550.7671755865481, 1191.3825318825106, 641.4052396032353), 101.61733475845037, -11.617334758450369), 0), \n('arc', ((1100.7444678658235, 550.7671755865481, 1191.3825318825106, 641.4052396032353), 90, -30.405188751695505), -0.5868182547551785), \n('arc', ((1160.7064029106034, 525.7245815988232, 1194.291324753369, 559.3095034415886), -120.40518875169549, 30.40518875169549), 0), \n('arc', ((1160.7064029106034, 525.7245815988232, 1194.291324753369, 559.3095034415886), -90, 22.777039083115042), 0.41988981604438474), \n('arc', ((1177.667983880108, 557.1942925619484, 1198.332016119892, 577.8583248017325), 112.77703908311507, -22.77703908311507), 0), \n('arc', ((1177.667983880108, 557.1942925619484, 1198.332016119892, 577.8583248017325), 90, -22.77703908311507), -0.41988981604438486)], 100.0, (626.7548225647391, -1214.7090572084226, 2471.3876138823766, 629.9237341092149))"
  val smallToro = "([ (802.2277900499461, 345.0040378623332),\n (827, 333),\n (847.641603985156, 322.99755789747115),\n (848, 323),\n (881.0483760010288, 323.4504027205199),\n (903, 336),\n (925, 349),\n (973.6583457657765, 351.06204799080245),\n (975.780584250072, 351.1069960311381),\n (1018, 328),\n (1036, 318),\n (1066.1216851050713, 317.61894355703356),\n (1066.4928157461195, 317.6165961441358),\n (1088, 327),\n (1105.5612588002105, 334.6618297213846),\n (1124, 326),\n (1145.035039170845, 316.1185267743442),\n (1155, 318),\n (1176, 324),\n (1188.888682453069, 325.1850545895935),\n (1194, 325)],\n\n\n [('straight', (None,), None), \n('arc', ((770.6651059139854, 254.99596213766682, 833.7904741859068, 318.1213304095881), 90, -51.70750239153659), -1.2665605586137296), \n('arc', ((821.3417935137995, 224.4028211598157, 873.9414144565126, 277.00244210252885), -141.70750239153642, 51.70750239153642), 0), \n('arc', ((821.3417935137995, 224.4028211598157, 873.9414144565126, 277.00244210252885), -90, 0.7808122677932374), 0.01362858860313876), \n('straight', ((848, 277, 881.0483760010288, 276.5495972794801),), 0.013628588603139471), \n('arc', ((854.5946373547067, 224.35583760955106, 906.7908203962936, 276.55202065113787), -89.21918773220663, 57.951007471336915), 1.6467705904647396), \n('arc', ((899.0665519764244, 250.9757161614995, 953.2265890026814, 305.13575318775645), 148.73181973913043, -56.30518573328271), 0.04237809482320704), \n('straight', ((925, 251, 973.6583457657765, 248.93795200919755),), 0.04237809482320669), \n('arc', ((925.6569695507229, 248.89300396886185, 1025.904198949421, 349.14023336755986), 92.42663400584766, -2.42663400584766), 0), \n('arc', ((925.6569695507229, 248.89300396886185, 1025.904198949421, 349.14023336755986), 90, -57.38442267295002), -1.5627202007927665), \n('arc', ((1014.5787110581995, 238.6102752376089, 1057.970171670794, 282.0017358502032), -147.38442267295002, 56.6596371477458), -0.01265056857334692), \n('straight', ((1036, 282, 1066.1216851050713, 282.38105644296644),), -0.012650568573346024), \n('arc', ((1037.1533963355039, 223.70456503463282, 1095.8322351567351, 282.3834038558642), -90.72478552520401, 0.7247855252040125), 0), \n('arc', ((1037.1533963355039, 223.70456503463282, 1095.8322351567351, 282.3834038558642), -90, 47.14247797365873), 1.0777293791374933), \n('arc', ((1081.6047458864048, 265.3381702786154, 1129.5177717140161, 313.251196106227), 137.1424779736591, -47.14247797365911), 0), \n('arc', ((1081.6047458864048, 265.3381702786154, 1129.5177717140161, 313.251196106227), 90, -50.32475851604849), -1.2055654221675085), \n('arc', ((1117.7052891581645, 229.22197320029457, 1172.3647891835255, 283.8814732256558), -140.32475851604838, 50.32475851604838), 0), \n('arc', ((1117.7052891581645, 229.22197320029457, 1172.3647891835255, 283.8814732256558), -90, 21.38417031591686), 0.39157703731970317), \n('arc', ((1081.7956234967678, 274.0683128982452, 1312.2225280244143, 504.4952174258918), 111.38417031591689, -10.877548829988044), 0.18545858400541376), \n('arc', ((1118.2073437082347, 274.8149454104065, 1259.570021197903, 416.17762290007465), 100.50662148592895, -10.506621485928946), 0), \n('arc', ((1118.2073437082347, 274.8149454104065, 1259.570021197903, 416.17762290007465), 90, -4.1469612462005045), -0.07250477962321278)], 80.80666614268354, (-1913.9659136765954, -6416.705015970818, 4786.510540004914, 283.77143771069177))"
  val elToro = "([(0, 100), (1, 100), (53, 130), (77.87663602286769, 173.02389378677776), (105, 189), (138.80844393971716, 189.6103665054419), (139.13739751528135, 189.61333567324658), (157, 175), (164.61895764990842, 137.30597027707546), (206.58157118062744, 102.97649573518072), (208, 103), (251, 128), (304.83551334862835, 158.11747403392462), (356, 132), (407.4658465234587, 105.72869351022109), (454, 126), (510.6019432514129, 150.65705839357082), (569, 124), (614.0928576923639, 103.41638801761314), (652, 117), (716, 140), (716.0976936699308, 140.00008965358575), (756, 122), (802.588021472423, 100.98395755999644), (804, 101), (849, 118), (899.5, 136.42492996696978), (950, 118), (990.9277781752639, 103.06749610726911), (1028, 115), (1077.9238739223335, 131.06908867601135), (1104, 127), (1131.4805559147494, 122.7117549382088), (1167, 130), (1221, 142), (1272, 151), (1289.9429499067967, 153.86588881240067), (1319, 146), (1396.5773648755992, 124.99941926268627), (1397, 125), (1525.9275736317566, 125.35431600362193), (1554, 132), (1586.2865451016364, 139.59647152365073), (1624, 129), (1662.3446466343921, 118.22618049073486), (1699, 128), (1740.2231364123008, 138.99177767790053), (1753, 138), (1787.0858619510361, 135.3541552836504), (1814, 137), (1850.3941751602051, 139.22556489768886), (1862, 139)], [('straight', (None,), None), ('straight', ((0, 500, 1, 500),), 0.0), ('arc', ((-59.06666666666669, 379.86666666666656, 61.06666666666669, 500.0), -90.0, 59.963278737698644), 1.7294900221729474), ('straight', ((53, 470, 77.87663602286769, 426.97610621322224),), 1.7294900221729468), ('arc', ((73.57943675314395, 410.9947866150762, 137.57574323283112, 474.99109309476336), 149.9632787376986, -58.9289919763043), 0.018053670453755024), ('straight', ((105, 411, 138.80844393971716, 410.3896334945581),), 0.018053670453754955), ('arc', ((120.91355872393882, 410.3866643267534, 157.36123630662388, 446.8343419094385), 91.03428676139428, -1.0342867613942843), 0), ('arc', ((120.91355872393882, 410.3866643267534, 157.36123630662388, 446.8343419094385), 90, -78.57296902598377), -4.947399822254898), ('straight', ((157, 425, 164.61895764990842, 462.69402972292454),), -4.947399822254899), ('arc', ((163.7703456102513, 411.40105312406706, 249.39279675100357, 497.0235042648193), -168.57296902598375, 78.57296902598375), 0), ('arc', ((163.7703456102513, 411.40105312406706, 249.39279675100357, 497.0235042648193), -90, 1.898681013024003), 0.03315037062252609), ('arc', ((153.75983910608917, 392.02742639616844, 258.76123669968695, 497.0288239897662), -88.101318986976, 56.54967803324049), 1.6285551099577231), ('arc', ((241.6608139132091, 441.8825259660754, 368.0102127840476, 568.2319248369139), 148.4483590462645, -58.4483590462645), 0), ('arc', ((241.6608139132091, 441.8825259660754, 368.0102127840476, 568.2319248369139), 90, -54.085076239161594), -1.3806885458107725), ('arc', ((343.9190468171871, 367.1777070772356, 471.0126462297303, 494.2713064897789), -144.0850762391616, 54.085076239161594), 0), ('arc', ((343.9190468171871, 367.1777070772356, 471.0126462297303, 494.2713064897789), -90, 47.07801294959273), 1.0753003609628795), ('arc', ((433.30662181408326, 449.3429416064292, 587.8972646887426, 603.9335844810885), 137.07801294959273, -47.07801294959273), 0), ('arc', ((433.30662181408326, 449.3429416064292, 587.8972646887426, 603.9335844810885), 90, -49.07070874260262), -1.1532397289796994), ('arc', ((554.4082187862354, 377.21433417012975, 673.7774965984923, 496.58361198238686), -139.07070874260265, 49.07070874260265), 0), ('arc', ((554.4082187862354, 377.21433417012975, 673.7774965984923, 496.58361198238686), -90, 39.429176586417185), 0.8222624274799885), ('arc', ((615.1257040189889, 459.9998297800485, 817.2452663470779, 662.1193921081376), 129.4291765864172, -39.324015819251144), 0.0018354036919457828), ('arc', ((662.8702566161892, 459.99991034641425, 769.3251307236724, 566.4547844538974), 90.10516076716613, -0.10516076716612588), 0), ('arc', ((662.8702566161892, 459.99991034641425, 769.3251307236724, 566.4547844538974), 90, -48.560651403072825), -1.1327082302510434), ('arc', ((740.4422156668811, 374.72443082892, 864.7338272779648, 499.01604244000356), -138.5606514030728, 48.5606514030728), 0), ('arc', ((740.4422156668811, 374.72443082892, 864.7338272779648, 499.01604244000356), -90, 1.301895941759227), 0.022726282076268717), ('arc', ((729.9204137330096, 354.1509804206452, 874.7881315305394, 499.01869821817496), -88.69810405824073, 38.787109584611706), 0.8417502862996109), ('arc', ((821.0810304443996, 463.5750700330302, 977.9189695556004, 620.413009144231), 130.08900552637098, -40.08900552637098), 0), ('arc', ((821.0810304443996, 463.5750700330302, 977.9189695556004, 620.413009144231), 90, -40.08900552637098), -0.841750286299611), ('arc', ((927.373041725672, 369.82303099354704, 1054.4825146248559, 496.9325038927309), -130.08900552637093, 40.089005526370926), 0), ('arc', ((927.373041725672, 369.82303099354704, 1054.4825146248559, 496.9325038927309), -90, 35.68380920283923), 0.7181444890803903), ('arc', ((992.3369170715447, 468.93091132398865, 1163.5108307731225, 640.1048250255664), 125.68380920283923, -35.68380920283923), 0), ('arc', ((992.3369170715447, 468.93091132398865, 1163.5108307731225, 640.1048250255664), 90, -17.738555973046147), -0.31988233575684566), ('arc', ((1041.2839850626947, 296.8951033576819, 1221.6771267668041, 477.2882450617912), -107.73855597304608, 17.738555973046076), 0), ('arc', ((1041.2839850626947, 296.8951033576819, 1221.6771267668041, 477.2882450617912), -90, 23.191177960858553), 0.42841830113788054), ('arc', ((1076.3798434617654, 457.9206910193841, 1375.3577837140167, 756.8986312716354), 113.19117796085854, -21.32474050341405), 0.03258700642623992), ('arc', ((1032.2020759117677, 92.41143206972279, 1397.8876481559287, 458.097004313884), -88.13356254255555, 16.28308468799345), 0.3278073134979839), ('arc', ((1232.3407902182826, 446.13411118759933, 1347.5451095953108, 561.3384305646275), 108.14952214543791, -18.149522145437913), 0), ('arc', ((1232.3407902182826, 446.13411118759933, 1347.5451095953108, 561.3384305646275), 90, -30.29443495985288), -0.5842225317933599), ('arc', ((1242.7894288860605, 167.4247087582361, 1550.365300865138, 475.0005807373137), -120.29443495985288, 30.29443495985288), 0), ('arc', ((1242.7894288860605, 167.4247087582361, 1550.365300865138, 475.0005807373137), -90, 0.15745864086835581), 0.0027481786373636068), ('straight', ((1397, 475, 1525.9275736317566, 474.64568399637807),), 0.002748178637363724), ('arc', ((1462.4037920094681, 347.94655116703734, 1589.1031640612566, 474.6459232188258), -89.84254135913152, 26.322361696270576), 0.49814193214557795), ('arc', ((1513.8761259494997, 460.40352847634927, 1658.696964253773, 605.2243667806226), 116.47982033713916, -26.47982033713916), 0), ('arc', ((1513.8761259494997, 460.40352847634927, 1658.696964253773, 605.2243667806226), 90, -31.387883686193163), -0.6101123831312134), ('arc', ((1588.7223295457134, 334.52918533190774, 1735.9669637230709, 481.77381950926514), -121.38788368619305, 31.38788368619305), 0), ('arc', ((1588.7223295457134, 334.52918533190774, 1735.9669637230709, 481.77381950926514), -90, 29.86008676433312), 0.574098917833057), ('arc', ((1657.4264221079768, 461.00822232209947, 1823.019850716625, 626.6016509307477), 119.86008676433305, -29.860086764333047), 0), ('arc', ((1657.4264221079768, 461.00822232209947, 1823.019850716625, 626.6016509307477), 90, -8.877132739669591), -0.1561869505021062), ('arc', ((1566.2024382214747, 22.878997257226672, 2007.9692856805975, 464.6458447163496), -98.87713273966963, 8.877132739669634), 0), ('arc', ((1566.2024382214747, 22.878997257226672, 2007.9692856805975, 464.6458447163496), -90, 6.998750848198526), 0.12276243046518023), ('arc', ((1551.708406417597, 460.77443510231114, 2149.0799439028133, 1058.1459725875275), 96.99875084819855, -6.998750848198554), 0), ('arc', ((1551.708406417597, 460.77443510231114, 2149.0799439028133, 1058.1459725875275), 90, -2.226862787420856), -0.03888566948049561)], 14.0, (-2631.399993047723, -8885.58016368303, 6718.710731829961, 464.5305611946542))"
  val lilPhantom = "([(0, 100), (2, 101), (58.4, 129.2), (139.0525974025974, 148.2394955489359), (216, 131), (313.45394489666137, 109.16616555515867), (413, 132), (504.58116167180043, 153.006850363978), (604, 128), (681.6670360177468, 108.46438702594867), (768, 133), (856.4808126520122, 158.14602620738913), (954, 127), (1014.131513189712, 107.7949826426094), (1059, 118), (1102.535369626637, 138.88395090120719), (1202.4936978827154, 161.61875983697723), (1291, 144), (1403.087165622025, 121.68704821397938), (1447, 125), (1588.1830536324114, 135.65138828574322), (1671, 132)], [('straight', (None,), None), ('straight', ((1, 500, 2, 499),), 0.5), ('straight', ((2, 499, 58.4, 470.8),), 0.49999999999999983), ('arc', ((-41.29209295153339, 451.7605044510641, 319.3972877567282, 812.4498851593256), 116.56505117707799, -26.56505117707799), 0), ('arc', ((-41.29209295153339, 451.7605044510641, 319.3972877567282, 812.4498851593256), 90, -25.25632123986246), -0.47176549275027657), ('arc', ((85.04725509411077, 34.02045483974024, 541.8606346992119, 490.83383444484133), -115.25632123986249, 25.256321239862487), 0), ('arc', ((85.04725509411077, 34.02045483974024, 541.8606346992119, 490.83383444484133), -90, 25.837999284563622), 0.484237351911674), ('arc', ((294.44978113629406, 446.993149636022, 714.7125422073068, 867.2559107070347), 115.83799928456361, -25.837999284563608), 0), ('arc', ((294.44978113629406, 446.993149636022, 714.7125422073068, 867.2559107070347), 90, -28.237471760806386), -0.5370376267050205), ('arc', ((517.510204425792, 163.22194979014182, 845.8238676097016, 491.53561297405133), -118.23747176080639, 28.237471760806386), 0), ('arc', ((517.510204425792, 163.22194979014182, 845.8238676097016, 491.53561297405133), -90, 31.7300350013777), 0.6183369894408217), ('arc', ((688.2399786569994, 441.8539737926109, 1024.721646647025, 778.3356417826366), 121.73003500137769, -31.730035001377686), 0), ('arc', ((688.2399786569994, 441.8539737926109, 1024.721646647025, 778.3356417826366), 90, -35.42525553336681), -0.7113266280591507), ('arc', ((910.3921752856826, 284.7263415493318, 1117.8708510937413, 492.2050173573906), -125.42525553336684, 35.42525553336684), 0), ('arc', ((910.3921752856826, 284.7263415493318, 1117.8708510937413, 492.2050173573906), -90, 25.627070625791205), 0.47970078307155), ('straight', ((1059, 482, 1102.535369626637, 461.1160490987928),), 0.4797007830715508), ('arc', ((971.3824764340459, 438.38124016302277, 1433.604919331385, 900.6036830603618), 115.62707062579126, -25.627070625791262), 0), ('arc', ((971.3824764340459, 438.38124016302277, 1433.604919331385, 900.6036830603618), 90, -22.51713906803475), -0.4145640621178606), ('arc', ((1110.4006434656942, -107.06009252664074, 1695.7736877783557, 478.3129517860206), -112.51713906803475, 22.51713906803475), 0), ('arc', ((1110.4006434656942, -107.06009252664074, 1695.7736877783557, 478.3129517860206), -90, 8.628878046048257), 0.15175136527423705), ('arc', ((647.1739491095007, 464.3486117142568, 2529.1921581553224, 2346.3668207600786), 98.62887804604827, -8.628878046048271), 0), ('arc', ((647.1739491095007, 464.3486117142568, 2529.1921581553224, 2346.3668207600786), 90, -5.049056829556136), -0.08835148517264081)], 11.5, (-2455.704893531956, -8564.319250901099, 6594.172431937606, 485.5580745684638))"

  val q1arcCCW = "([(200, 200),(100, 300)], [('straight', (None,), None),  ('arc', ((0, 300.0, 200, 500), 0.0, 90), -48.494845360825195)], 500.0, (100, 300, 100, 300))"
  val q2arcCCW = "([(100, 300),(0, 200)], [('straight', (None,), None),   ('arc', ((0, 300, 200, 500), 90, 90.0), 0.0)], 500.0, (100, 300, 100, 300))"
  val q3arcCW  = "([(100, 100),(29, 129)], [('straight', (None,), None),   ('arc', ((0, 300, 200, 500), -90, -45.0), 1.0)], 500.0, (171, 129, 171, 129))"
  val q4arcCW  = "([(171, 129),(100, 100)], [('straight', (None,), None),   ('arc', ((0, 300, 200, 500), -45, -45.0), 1.0)], 500.0, (171, 129, 171, 129))"

  def timeSecs[T](f:(() => T)):Double = {
    val early = System.currentTimeMillis()
    val res = f()
    val late = System.currentTimeMillis()
    (late - early) / 1000.0
  }

  def countVars(fml:Formula):Int = {
    val ss = StaticSemantics(fml)
    val theSet = (ss.bv ++ ss.fv).toSet ++ StaticSemantics.symbols(fml)
    theSet.size
  }

  def mean(xs:List[Double]):Double = {
    xs match {
      case Nil => 0.0
      case _ => (xs.foldLeft(0.0){(x,y) => x+y})/xs.length
    }
  }

  def setVelocity(f:File, v:Double):File = {
    val (w,x,_y,z) = f
    (w,x,Number(v),z)
  }

  case class CoasterStats(name:String, env:AccelEnvelope,
                          nSections:Int, nVars:Int, fastTimes:List[Double], fastMean:Double,
                          slowTimes:List[Double], slowMean:Double, stepsFast:Int, stepsSlow:Int,
                          speedupPercent:Double, proof:ProvableSig,size:Double)

  def defaultPrinter(doFast:Boolean, doFormula:Boolean, doStats:Boolean):(CoasterStats => ProvableSig) = {
    case CoasterStats(name,env,nSections,nVars,fastTimes,fastMean,slowTimes,slowMean,stepsFast,stepsSlow,speedupPercent,proof,size) =>
      val speedUpText =
        if(doFast) {
          "Running tests with component reuse only, no comparison of component reuse speedup"
        }
        else if(speedupPercent > 0) {
          s"Component Reuse Speedup (i.e. (hi-lo)/lo in %): $speedupPercent"
        } else {
          s"Component Reuse Slowdown (i.e. (hi-lo)/lo in %): $speedupPercent"
        }
      println("********** TEST RESULTS FOR " + name + " ***************")
      env.printLoudly()
      if(doStats) {
        println("Number of track section in design: " + nSections)
        println("Total #variables in formula: " + nVars)
        println("All Times with Reuse (seconds): " + fastTimes)
        println("Avg Time with Reuse (seconds): " + fastMean)
        println("All Times without Reuse (seconds): " + slowTimes)
        println("Avg Time without Reuse (seconds): " + slowMean)
        println("Number of proof steps with Reuse: " + stepsFast)
        if (!doFast) {
          println("Number of proof steps without Reuse: " + stepsSlow)
        }
        println(speedUpText)
      }
      proof
  }

  // feetPerUnit = feetPerUnit, velocity = velocity, doFormula = doFormula, doTactic = doTactic, doStats = doStats)
  def prover(file:String, name:String, doFast:Boolean = true, NUM_RUNS:Int = 1, feetPerUnit:Double,
             velocity:Option[Double], doFormula:Boolean, doStats:Boolean, callback:Option[(CoasterStats => ProvableSig)] = None, debugLevel:Int = 1, useNaive:Boolean = false):ProvableSig = {
    val cb = callback.getOrElse(defaultPrinter(doFast,doFormula,doStats))
    val spec = new CoasterXSpec(feetPerUnit)
    val parsedRaw = CoasterXParser.parseFile(file).get
    val parsed =
      velocity match {
        case Some(vFeetPerSecond) => setVelocity(parsedRaw, vFeetPerSecond/feetPerUnit)
        case None => parsedRaw
      }
    val (align,alignFml) = spec.prepareFile(parsed)
    val env = spec.envelope(align)
    val specc = spec.fromAligned((align,alignFml),env)
    val specStr = KeYmaeraXPrettyPrinter.stringify(specc)
    val specLenKB = specStr.length / 1000.0
    println("Formula size (KB): " + specLenKB)
    val nSections = spec.countSections(align)
    val nVars = countVars(specc)

    val prFast = new CoasterXProver(spec,env, reuseComponents = true, debugLevel = debugLevel, useNaive = useNaive)
    val prSlo = new CoasterXProver(spec,env, reuseComponents = false, debugLevel = debugLevel, useNaive = useNaive)
    var resFast:Option[ProvableSig] = None
    var resSlo:Option[ProvableSig] = None
    var sloTimes:List[Double] = Nil
    var fastTimes:List[Double] = Nil
    for(i <- 0 until NUM_RUNS) {
      fastTimes = timeSecs { case () => resFast = Some(prFast(file)) } :: fastTimes
      prFast.resetLemmaDB()
      if(!doFast){
        sloTimes = timeSecs { case () => resSlo = Some(prSlo(file)) } :: sloTimes
        prSlo.resetLemmaDB()
      }
    }
    val fastMean = mean(fastTimes)
    val sloMean = mean(sloTimes)
    val percentDiffAvg = ((sloMean-fastMean)/fastMean)*100.0
    val stats =
    CoasterStats(name:String, env:AccelEnvelope,
      nSections:Int, nVars:Int, fastTimes:List[Double], fastMean:Double,
      sloTimes:List[Double], sloMean:Double, resFast.get.steps, resSlo.getOrElse(resFast.get).steps,
      percentDiffAvg, resFast.get, specLenKB)
    cb(stats)
  }

  val DEBUG = false
  // @TODO: Implement
  // NOTE IMPORTANT: Must be evaluated after mathematica initialized
  lazy val tacticMap:Map[String,BelleExpr] = Map(
    "q1ccw" -> {
      TactixLibrary.unfoldProgramNormalize &
      dC("dx=(cy()-y)/r()".asFormula)(1) <(nil, dI()(1)) &
      dC("dy=-(cx()-x)/r()".asFormula)(1) <(nil, dI()(1)) &
      dC("v^2/2>g()*(y1()-y)".asFormula)( 1)  <(nil, dI()(1)) &
      dC("v>0".asFormula)(1)  <(
        ODE(1),
        dC("2*v!=0".asFormula)(1)  <(
          dG("{a'=dy*g()/(2*v)*a+0}".asDifferentialProgram, Some("a^2*v=1".asFormula))(1) & existsR("(1/v)^(1/2)".asTerm)(1) & dI()(1),
          ODE(1)
        )
      ) &
      ODE(1)
    },
    "q2ccw" -> {
      val ECirc:Formula = s"v^2=v0()^2+2*yInit()*g()-2*y*g()".asFormula
      val dGDefined:Formula = s"2*v!=0".asFormula
      dC(s"dx=(cy()-y)/r()".asFormula)(1) <(nil, dI()(1)) &
      dC(s"dy=-(cx()-x)/r()".asFormula)(1)  <(nil, dI()(1)) &
      dC(ECirc)('R) <(nil, dI()(1)) &
      dC(s"v^2=v0()^2+2*yGlobal()*g()-2*y*g()".asFormula)(1) <(nil, dI()(1)) &
      dC("v>0".asFormula)('R) <(nil, ODE(1)) &
      dC("(x-cx())^2+(y-cy())^2=r()^2".asFormula)('R) <(ODE(1), dI()(1)) &
      ODE(1)

    },
    "q3cw" -> {
      dC("dx=-(cy()-y)/r()".asFormula)(1) <(nil, dI()(1)) &
      dC("dy=(cx()-x)/r()".asFormula)(1) <(nil, dI()(1)) &
      dC("v^2=v0()^2+2*yGlobal()*g()-2*y*g()".asFormula)( 1)  <(nil, dI()(1)) &
      dC("v^2/2>g()*(y1()-y)".asFormula)( 1)  <(nil, dI()(1)) &
      dC("v>0".asFormula)(1) <(nil,
        dC("2*v!=0".asFormula)(1) <(
          dG("{a'=dy*g()/(2*v)*a+0}".asDifferentialProgram, Some("a^2*v=1".asFormula))(1) & existsR("(1/v)^(1/2)".asTerm)(1) & dI()(1),
          ODE(1)
        )
      ) &
      dC("(x-cx())^2 + (y-cy())^2 = r()^2".asFormula)(1) <(nil, dI()(1)) &
      ODE(1)
    },
    "q4cw" -> {
      dC(s"dx=-(cy()-y)/r()".asFormula)(1)  <(nil, dI()(1)) &
      dC(s"dy=(cx()-x)/r()".asFormula)( 1)  <(nil, ODE(1)) &
      dC(s"v^2=v0()^2+2*yGlobal()*g()-2*y*g()".asFormula)(1) <(nil, dI()(1)) &
      dC(s"v>0".asFormula)(1) <(nil, ODE(1)) &
      dC(s"(cx()-x)^2+(cy()-y)^2=r()^2".asFormula)(1) <(nil, dI()(1)) &
      ODE(1)
    },
    "q1" -> {
      TactixLibrary.unfoldProgramNormalize &
      dC("dx=-(cy()-y)/r()".asFormula)(1) <(nil, dI()(1)) &
      dC("dy=(cx()-x)/r()".asFormula)(1) <(nil, dI()(1)) &
      dC("v^2=v0()^2+2*yGlobal()*g()-2*y*g()".asFormula)( 1)  <(nil, dI()(1)) &
      dC("v>0".asFormula)(1) <(nil, ODE(1)) &
      dC("(x-cx())^2 + (y-cy())^2 = r()^2".asFormula)(1) <(nil, ODE(1)) &
      ODE(1)
    },
    "q2" -> {
      TactixLibrary.unfoldProgramNormalize &
      dC(s"dx^2 + dy^2 = 1".asFormula)(1)    <(nil, dI()(1)) &
      dC(s"dx=(y-cy())/r()".asFormula)(1) <(nil, dI()(1)) &
      dC(s"dy=-(x-cx())/r()".asFormula)(1)  <(nil, dI()(1)) &
      dC(s"v^2=v0()^2+2*yGlobal()*g()-2*y*g()".asFormula)('R) <(nil, dI()(1)) &
      dC(s"(v^2)/2 > g()*(y1() - y)".asFormula)(1) <(nil, dI()(1)) &
      dC("v>0".asFormula)('R) &
      nil <(nil, dC("2*v!=0".asFormula)(1)) &
      nil <(nil, dG(s"{a'=((dy*g())/(2*v))*a+0}".asDifferentialProgram, Some("a^2*v=1".asFormula))(1), nil) &
      nil <(nil, existsR("(1/v)^(1/2)".asTerm)(1), nil) &
      nil <(nil, dI()(1), nil) &
      nil <(nil, ODE(1)) &
      ODE(1)

    },
    "q3" -> {
      dC("dx=-(y-cy())/r()".asFormula)(1) <(nil, dI()(1)) &
        dC("dy=(x-cx())/r()".asFormula)(1) <(nil, dI()(1)) &
        dC("v^2=v0()^2+2*yGlobal()*g()-2*y*g()".asFormula)( 1)  <(nil, dI()(1)) &
        dC("v>0".asFormula)(1) <(nil, ODE(1)) &
        dC("(x-cx())^2 + (y-cy())^2 = r()^2".asFormula)(1) <(nil, ODE(1)) &
        ODE(1)
    },
    "q4" -> {
      dC(s"dx=-(y-cy())/r()".asFormula)(1)  <(nil, dI()(1)) &
      dC(s"dy=(x-cx())/r()".asFormula)( 1)  <(nil, ODE(1)) &
      dC(s"cx()<=x".asFormula)(1)  <(nil, ODE(1)) &
      dC(s"g() > 0".asFormula)(1) <(nil, dI()(1)) &
      dC(s"v^2=v0()^2+2*yGlobal()*g()-2*y*g()".asFormula)(1) <(nil, dI()(1)) &
      dC(s"(cx()-x)^2+(cy()-y)^2=r()^2".asFormula)(1) <(nil, DebuggingTactics.debug("This dI is slow", doPrint = DEBUG) & dI()(1)) &
      dC(s"y < cy()".asFormula)(1) <(nil,
        dC(s"2*(y-cy())*r()!=0".asFormula)(1)  <(
          dG(s"{a'=(cx()-x)*v/(2*(y-cy())*r())*a+0}".asDifferentialProgram, Some(s"a^2*(y-cy())=-1".asFormula))(1) &
            existsR(s"(-1/(y-cy()))^(1/2)".asTerm)(1) &
            ODE(1),
          ODE(1)
        )
      ) &
      dC(s"(v^2)/2 > g()*(y1() - y)".asFormula)(1) <(nil, ODE(1)) &
      dC(s"v>0".asFormula)(1)  <(nil,
        dC(s"2*v!=0".asFormula)(1)  <(
          dG(s"{a'=((dy*g())/(2*v))*a+0}".asDifferentialProgram, Some("a^2*v=1".asFormula))(1) &
            existsR("(1/v)^(1/2)".asTerm)(1) &
            dI()(1),
          ODE(1)
        )
      ) &
      ODE(1)
    },
    //@TODO: Replace with "master" and see what happens
    "lineup" -> {
      solve(1) & allR(1) & implyR(1) & implyR(1) &
      implyL(-2)  <(
        hideR(1) & QE,
        master()
      )
    },
    "linedown" -> {
      solve(1) & allR(1) & implyR(1) & implyR(1) &
        implyL(-2)  <(
          hideR(1) & QE,
          master()
        )
    }
  )

  case class ComponentStats(name:String, allTimes:List[Double], meanTime:Double, steps:Int, vars:Int, size:Double, tactic:BelleExpr, seq:Sequent)

  def defaultStatPrinter(doFormula:Boolean,doTactic:Boolean,willDoStats:Boolean,numRuns:Int):(ComponentStats => Unit) = {case
    ComponentStats(name,allTimes,meanTime, steps, vars, size, tactic, seq) =>
    println("**** Test results for component " + name + "****")
    if(willDoStats) {
      println("All Times (secs): " + allTimes)
      println("Average time: " + mean(allTimes))
      println("Proof steps: " + steps)
      println("Total vars: " + vars)
      println("Fml size (KB): " + size)
    }
    //@TODO: Actually use these in the prover implementation
    if(doTactic) {
      println("Component tactic: " + tacticMap(name.toLowerCase))
    }
    if(doFormula) {
      println("Component formula (sequent): " + seq)
    }
  }

  def doStats(name:String, f:()=>ProvableSig, doFormula:Boolean, doTactic:Boolean, willDoStats:Boolean, numRuns:Int, callback:Option[(ComponentStats => Unit)]=None):Unit = {
    val cb = callback.getOrElse(defaultStatPrinter(doFormula,doTactic,willDoStats,numRuns))
    var res:Option[ProvableSig] = None
    var allTimes:List[Double] = List()
    for(i <- 0 until numRuns) {
      allTimes = timeSecs({case () => res = Some(f())}) :: allTimes
    }
    val steps = res.get.steps
    val vars = countVars(res.get.conclusion.toFormula)
    val size = KeYmaeraXPrettyPrinter.stringify(res.get.conclusion.toFormula).length/1000.0
    val cs = ComponentStats(name,allTimes,mean(allTimes), steps, vars, size, tacticMap(name.toLowerCase), res.get.conclusion)
    cb(cs)
  }

  object CoasterPen {
    def init(x:Double,y:Double,theta:Double):CoasterPen = {CoasterPen(x,y,theta, Nil)}


  def byrcPen = {
     CoasterPen.init(0,100,0)
     .advanceStraight(48.0)
     .advanceArc(97.25,59.0,false)
     .advanceStraight(74.0)
     .advanceArc(97.25,100.0,true)
     .advanceArc(97.25,108.0,false)
     .advanceArc(97.25,108.0,true)
     .advanceArc(228.0,176.0,true)
  }

  }
  /* This is not actually used to prove things (and certainly not the GUI which is in Python anyway).
  * This is used to produce a precise spec for the backyard coaster since it's provided in a different format from ours.*/
  case class CoasterPen(x:Double,y:Double,theta:Double, trace:List[(Double,Double)]) {
    def dx:Double = Math.cos(theta)
    def dy:Double = Math.sin(theta)
    def advanceStraight(length:Double):CoasterPen = {
      val deltaX = dx*length
      val deltaY = dy*length
      val (x1,y1) = (x+deltaX,y+deltaY)
      CoasterPen(x1,y1,theta, (x,y)::trace)
    }

      // Compute direction-to-center vector using tangent vector and wiseness
  def centerFromTangent(dir:(Double,Double), isCw:Boolean):(Double,Double) = {
    if (isCw) {
      (dir._2, -(dir._1))
    } else {
      (-(dir._2), dir._1)
    }
  }

  def rotVec (dx:Double,dy:Double, theta:Double):(Double,Double) = {
    val cosT = Math.cos(theta)
    val sinT = Math.sin(theta)
    (cosT*dx - sinT*dy, sinT*dx + cosT*dy)
//    (-sinT*dx + cosT*dy, cosT*dx + sinT*dy)
//    (cosT*dx + sinT*dy, -sinT*dx + cosT*dy)
  }

  def tangentFromCenter(dir:(Double,Double), isCw:Boolean):(Double,Double) =
    centerFromTangent(dir, !isCw)


    def advanceArc(radius:Double, arcLen:Double, goesUp:Boolean):CoasterPen = {
      val deltaRad = if(goesUp) arcLen/radius else -arcLen/radius
      val theta1 = theta+deltaRad
      val isCw = !goesUp
      val (dcx,dcy) = centerFromTangent((dx,dy), isCw)
      val (cx,cy) = (x + dcx*radius, y + dcy*radius)
      val (dcx1, dcy1) = rotVec(dcx,dcy,deltaRad )
      val (dcx2, dcy2) = rotVec(dcx,dcy,deltaRad + Math.PI)
      val (x1,y1) = (cx + dcx2*radius, cy + dcy2*radius)
      println(s"DEBUG 1: $deltaRad; $theta1; ->($dcx,$dcy); ($cx,$cy); ->($dcx1,$dcy1) ||| ->($dcx2,$dcy2); ($x1,$y1)")
      CoasterPen(x1,y1,theta1, (x,y)::trace)
    }

    override def toString:String = {
      val points = ((x,y)::trace).reverse
      points.foldLeft("")((acc,x) => x+"\n"+acc)
    }
  }
}
